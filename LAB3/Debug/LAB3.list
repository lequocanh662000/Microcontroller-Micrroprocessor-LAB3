
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c68  08002c68  0002012c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c68  08002c68  0002012c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c68  08002c68  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c6c  08002c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08002c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000012c  08002d9c  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08002d9c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099be  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5d  00000000  00000000  00029b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c5b  00000000  00000000  0002cb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd6c  00000000  00000000  000437e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008291b  00000000  00000000  0004f54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e8  00000000  00000000  000d1ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000012c 	.word	0x2000012c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c30 	.word	0x08002c30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000130 	.word	0x20000130
 8000148:	08002c30 	.word	0x08002c30

0800014c <fsm_for_input1_processing>:
enum ButtonState buttonState2 = BUTTON_RELEASED;
enum ButtonState buttonState3 = BUTTON_RELEASED;
enum ButtonState buttonState4 = BUTTON_RELEASED;

// BUTTON 1
void fsm_for_input1_processing(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(buttonState1){
 8000150:	4b1c      	ldr	r3, [pc, #112]	; (80001c4 <fsm_for_input1_processing+0x78>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b02      	cmp	r3, #2
 8000156:	d024      	beq.n	80001a2 <fsm_for_input1_processing+0x56>
 8000158:	2b02      	cmp	r3, #2
 800015a:	dc31      	bgt.n	80001c0 <fsm_for_input1_processing+0x74>
 800015c:	2b00      	cmp	r3, #0
 800015e:	d002      	beq.n	8000166 <fsm_for_input1_processing+0x1a>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d00a      	beq.n	800017a <fsm_for_input1_processing+0x2e>
			}else{
				// to do
			}
			break;
	}
}
 8000164:	e02c      	b.n	80001c0 <fsm_for_input1_processing+0x74>
			if(is_button_pressed(0)){
 8000166:	2000      	movs	r0, #0
 8000168:	f000 f95a 	bl	8000420 <is_button_pressed>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d021      	beq.n	80001b6 <fsm_for_input1_processing+0x6a>
				buttonState1 = BUTTON_PRESSED;
 8000172:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <fsm_for_input1_processing+0x78>)
 8000174:	2201      	movs	r2, #1
 8000176:	701a      	strb	r2, [r3, #0]
			break;
 8000178:	e01d      	b.n	80001b6 <fsm_for_input1_processing+0x6a>
			if(!is_button_pressed(0)){
 800017a:	2000      	movs	r0, #0
 800017c:	f000 f950 	bl	8000420 <is_button_pressed>
 8000180:	4603      	mov	r3, r0
 8000182:	2b00      	cmp	r3, #0
 8000184:	d103      	bne.n	800018e <fsm_for_input1_processing+0x42>
				buttonState1 = BUTTON_RELEASED;
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <fsm_for_input1_processing+0x78>)
 8000188:	2200      	movs	r2, #0
 800018a:	701a      	strb	r2, [r3, #0]
			break;
 800018c:	e015      	b.n	80001ba <fsm_for_input1_processing+0x6e>
				if(is_button_pressed_1s(0)){
 800018e:	2000      	movs	r0, #0
 8000190:	f000 f960 	bl	8000454 <is_button_pressed_1s>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d00f      	beq.n	80001ba <fsm_for_input1_processing+0x6e>
					buttonState1 = BUTTON_PRESSES_MORE_THAN_1_SEC;
 800019a:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <fsm_for_input1_processing+0x78>)
 800019c:	2202      	movs	r2, #2
 800019e:	701a      	strb	r2, [r3, #0]
			break;
 80001a0:	e00b      	b.n	80001ba <fsm_for_input1_processing+0x6e>
			if(!is_button_pressed(0)){
 80001a2:	2000      	movs	r0, #0
 80001a4:	f000 f93c 	bl	8000420 <is_button_pressed>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d107      	bne.n	80001be <fsm_for_input1_processing+0x72>
				buttonState1 = BUTTON_RELEASED;
 80001ae:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <fsm_for_input1_processing+0x78>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	701a      	strb	r2, [r3, #0]
			break;
 80001b4:	e003      	b.n	80001be <fsm_for_input1_processing+0x72>
			break;
 80001b6:	bf00      	nop
 80001b8:	e002      	b.n	80001c0 <fsm_for_input1_processing+0x74>
			break;
 80001ba:	bf00      	nop
 80001bc:	e000      	b.n	80001c0 <fsm_for_input1_processing+0x74>
			break;
 80001be:	bf00      	nop
}
 80001c0:	bf00      	nop
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	20000148 	.word	0x20000148

080001c8 <fsm_for_input2_processing>:
// BUTTON 2
void fsm_for_input2_processing(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	switch(buttonState2){
 80001cc:	4b1c      	ldr	r3, [pc, #112]	; (8000240 <fsm_for_input2_processing+0x78>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d024      	beq.n	800021e <fsm_for_input2_processing+0x56>
 80001d4:	2b02      	cmp	r3, #2
 80001d6:	dc31      	bgt.n	800023c <fsm_for_input2_processing+0x74>
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d002      	beq.n	80001e2 <fsm_for_input2_processing+0x1a>
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d00a      	beq.n	80001f6 <fsm_for_input2_processing+0x2e>
			}else{
				// to do
			}
			break;
	}
}
 80001e0:	e02c      	b.n	800023c <fsm_for_input2_processing+0x74>
			if(is_button_pressed(1)){
 80001e2:	2001      	movs	r0, #1
 80001e4:	f000 f91c 	bl	8000420 <is_button_pressed>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d021      	beq.n	8000232 <fsm_for_input2_processing+0x6a>
				buttonState2 = BUTTON_PRESSED;
 80001ee:	4b14      	ldr	r3, [pc, #80]	; (8000240 <fsm_for_input2_processing+0x78>)
 80001f0:	2201      	movs	r2, #1
 80001f2:	701a      	strb	r2, [r3, #0]
			break;
 80001f4:	e01d      	b.n	8000232 <fsm_for_input2_processing+0x6a>
			if(!is_button_pressed(1)){
 80001f6:	2001      	movs	r0, #1
 80001f8:	f000 f912 	bl	8000420 <is_button_pressed>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d103      	bne.n	800020a <fsm_for_input2_processing+0x42>
				buttonState2 = BUTTON_RELEASED;
 8000202:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <fsm_for_input2_processing+0x78>)
 8000204:	2200      	movs	r2, #0
 8000206:	701a      	strb	r2, [r3, #0]
			break;
 8000208:	e015      	b.n	8000236 <fsm_for_input2_processing+0x6e>
				if(is_button_pressed_1s(1)){
 800020a:	2001      	movs	r0, #1
 800020c:	f000 f922 	bl	8000454 <is_button_pressed_1s>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d00f      	beq.n	8000236 <fsm_for_input2_processing+0x6e>
					buttonState2 = BUTTON_PRESSES_MORE_THAN_1_SEC;
 8000216:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <fsm_for_input2_processing+0x78>)
 8000218:	2202      	movs	r2, #2
 800021a:	701a      	strb	r2, [r3, #0]
			break;
 800021c:	e00b      	b.n	8000236 <fsm_for_input2_processing+0x6e>
			if(!is_button_pressed(1)){
 800021e:	2001      	movs	r0, #1
 8000220:	f000 f8fe 	bl	8000420 <is_button_pressed>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d107      	bne.n	800023a <fsm_for_input2_processing+0x72>
				buttonState2 = BUTTON_RELEASED;
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <fsm_for_input2_processing+0x78>)
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
			break;
 8000230:	e003      	b.n	800023a <fsm_for_input2_processing+0x72>
			break;
 8000232:	bf00      	nop
 8000234:	e002      	b.n	800023c <fsm_for_input2_processing+0x74>
			break;
 8000236:	bf00      	nop
 8000238:	e000      	b.n	800023c <fsm_for_input2_processing+0x74>
			break;
 800023a:	bf00      	nop
}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000149 	.word	0x20000149

08000244 <fsm_for_input3_processing>:
// BUTTON 3
void fsm_for_input3_processing(void){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	switch(buttonState3){
 8000248:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <fsm_for_input3_processing+0x78>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b02      	cmp	r3, #2
 800024e:	d024      	beq.n	800029a <fsm_for_input3_processing+0x56>
 8000250:	2b02      	cmp	r3, #2
 8000252:	dc31      	bgt.n	80002b8 <fsm_for_input3_processing+0x74>
 8000254:	2b00      	cmp	r3, #0
 8000256:	d002      	beq.n	800025e <fsm_for_input3_processing+0x1a>
 8000258:	2b01      	cmp	r3, #1
 800025a:	d00a      	beq.n	8000272 <fsm_for_input3_processing+0x2e>
			}else{
				// to do
			}
			break;
	}
}
 800025c:	e02c      	b.n	80002b8 <fsm_for_input3_processing+0x74>
			if(is_button_pressed(2)){
 800025e:	2002      	movs	r0, #2
 8000260:	f000 f8de 	bl	8000420 <is_button_pressed>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d021      	beq.n	80002ae <fsm_for_input3_processing+0x6a>
				buttonState3 = BUTTON_PRESSED;
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <fsm_for_input3_processing+0x78>)
 800026c:	2201      	movs	r2, #1
 800026e:	701a      	strb	r2, [r3, #0]
			break;
 8000270:	e01d      	b.n	80002ae <fsm_for_input3_processing+0x6a>
			if(!is_button_pressed(2)){
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f8d4 	bl	8000420 <is_button_pressed>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d103      	bne.n	8000286 <fsm_for_input3_processing+0x42>
				buttonState3 = BUTTON_RELEASED;
 800027e:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <fsm_for_input3_processing+0x78>)
 8000280:	2200      	movs	r2, #0
 8000282:	701a      	strb	r2, [r3, #0]
			break;
 8000284:	e015      	b.n	80002b2 <fsm_for_input3_processing+0x6e>
				if(is_button_pressed_1s(2)){
 8000286:	2002      	movs	r0, #2
 8000288:	f000 f8e4 	bl	8000454 <is_button_pressed_1s>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d00f      	beq.n	80002b2 <fsm_for_input3_processing+0x6e>
					buttonState3 = BUTTON_PRESSES_MORE_THAN_1_SEC;
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <fsm_for_input3_processing+0x78>)
 8000294:	2202      	movs	r2, #2
 8000296:	701a      	strb	r2, [r3, #0]
			break;
 8000298:	e00b      	b.n	80002b2 <fsm_for_input3_processing+0x6e>
			if(!is_button_pressed(2)){
 800029a:	2002      	movs	r0, #2
 800029c:	f000 f8c0 	bl	8000420 <is_button_pressed>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d107      	bne.n	80002b6 <fsm_for_input3_processing+0x72>
				buttonState3 = BUTTON_RELEASED;
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <fsm_for_input3_processing+0x78>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
			break;
 80002ac:	e003      	b.n	80002b6 <fsm_for_input3_processing+0x72>
			break;
 80002ae:	bf00      	nop
 80002b0:	e002      	b.n	80002b8 <fsm_for_input3_processing+0x74>
			break;
 80002b2:	bf00      	nop
 80002b4:	e000      	b.n	80002b8 <fsm_for_input3_processing+0x74>
			break;
 80002b6:	bf00      	nop
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	2000014a 	.word	0x2000014a

080002c0 <fsm_for_input4_processing>:
// BUTTON 4
void fsm_for_input4_processing(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch(buttonState4){
 80002c4:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <fsm_for_input4_processing+0x78>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	d024      	beq.n	8000316 <fsm_for_input4_processing+0x56>
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	dc31      	bgt.n	8000334 <fsm_for_input4_processing+0x74>
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d002      	beq.n	80002da <fsm_for_input4_processing+0x1a>
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d00a      	beq.n	80002ee <fsm_for_input4_processing+0x2e>
			}else{
				// to do
			}
			break;
	}
}
 80002d8:	e02c      	b.n	8000334 <fsm_for_input4_processing+0x74>
			if(is_button_pressed(3)){
 80002da:	2003      	movs	r0, #3
 80002dc:	f000 f8a0 	bl	8000420 <is_button_pressed>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d021      	beq.n	800032a <fsm_for_input4_processing+0x6a>
				buttonState4 = BUTTON_PRESSED;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <fsm_for_input4_processing+0x78>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	701a      	strb	r2, [r3, #0]
			break;
 80002ec:	e01d      	b.n	800032a <fsm_for_input4_processing+0x6a>
			if(!is_button_pressed(3)){
 80002ee:	2003      	movs	r0, #3
 80002f0:	f000 f896 	bl	8000420 <is_button_pressed>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d103      	bne.n	8000302 <fsm_for_input4_processing+0x42>
				buttonState4 = BUTTON_RELEASED;
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <fsm_for_input4_processing+0x78>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	701a      	strb	r2, [r3, #0]
			break;
 8000300:	e015      	b.n	800032e <fsm_for_input4_processing+0x6e>
				if(is_button_pressed_1s(0)){
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f8a6 	bl	8000454 <is_button_pressed_1s>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d00f      	beq.n	800032e <fsm_for_input4_processing+0x6e>
					buttonState4 = BUTTON_PRESSES_MORE_THAN_1_SEC;
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <fsm_for_input4_processing+0x78>)
 8000310:	2202      	movs	r2, #2
 8000312:	701a      	strb	r2, [r3, #0]
			break;
 8000314:	e00b      	b.n	800032e <fsm_for_input4_processing+0x6e>
			if(!is_button_pressed(3)){
 8000316:	2003      	movs	r0, #3
 8000318:	f000 f882 	bl	8000420 <is_button_pressed>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d107      	bne.n	8000332 <fsm_for_input4_processing+0x72>
				buttonState4 = BUTTON_RELEASED;
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <fsm_for_input4_processing+0x78>)
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
			break;
 8000328:	e003      	b.n	8000332 <fsm_for_input4_processing+0x72>
			break;
 800032a:	bf00      	nop
 800032c:	e002      	b.n	8000334 <fsm_for_input4_processing+0x74>
			break;
 800032e:	bf00      	nop
 8000330:	e000      	b.n	8000334 <fsm_for_input4_processing+0x74>
			break;
 8000332:	bf00      	nop
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	2000014b 	.word	0x2000014b

0800033c <reading_button>:
static uint16_t counterForButtonPress1s[NUMBER_OF_BUTTONS];
static uint8_t flagForButtonPress1s[NUMBER_OF_BUTTONS];

//////////////////////  MAIN ////////////////////////////

void reading_button(void){
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<NUMBER_OF_BUTTONS; i++){
 8000342:	2300      	movs	r3, #0
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	e054      	b.n	80003f2 <reading_button+0xb6>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000348:	79fa      	ldrb	r2, [r7, #7]
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	492d      	ldr	r1, [pc, #180]	; (8000404 <reading_button+0xc8>)
 800034e:	5c89      	ldrb	r1, [r1, r2]
 8000350:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <reading_button+0xcc>)
 8000352:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonDataPort[i], buttonDataPin[i]);
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	4a2d      	ldr	r2, [pc, #180]	; (800040c <reading_button+0xd0>)
 8000358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	492c      	ldr	r1, [pc, #176]	; (8000410 <reading_button+0xd4>)
 8000360:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000364:	79fc      	ldrb	r4, [r7, #7]
 8000366:	4619      	mov	r1, r3
 8000368:	4610      	mov	r0, r2
 800036a:	f001 fc21 	bl	8001bb0 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	461a      	mov	r2, r3
 8000372:	4b24      	ldr	r3, [pc, #144]	; (8000404 <reading_button+0xc8>)
 8000374:	551a      	strb	r2, [r3, r4]

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	4a22      	ldr	r2, [pc, #136]	; (8000404 <reading_button+0xc8>)
 800037a:	5cd2      	ldrb	r2, [r2, r3]
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4922      	ldr	r1, [pc, #136]	; (8000408 <reading_button+0xcc>)
 8000380:	5ccb      	ldrb	r3, [r1, r3]
 8000382:	429a      	cmp	r2, r3
 8000384:	d132      	bne.n	80003ec <reading_button+0xb0>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000386:	79fa      	ldrb	r2, [r7, #7]
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	491e      	ldr	r1, [pc, #120]	; (8000404 <reading_button+0xc8>)
 800038c:	5c89      	ldrb	r1, [r1, r2]
 800038e:	4a21      	ldr	r2, [pc, #132]	; (8000414 <reading_button+0xd8>)
 8000390:	54d1      	strb	r1, [r2, r3]

			if(buttonBuffer[i] == BUTTON_IS_PRESSED){ // button is triggered
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4a1f      	ldr	r2, [pc, #124]	; (8000414 <reading_button+0xd8>)
 8000396:	5cd3      	ldrb	r3, [r2, r3]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d11e      	bne.n	80003da <reading_button+0x9e>
				if(counterForButtonPress1s[i] == 0)update_mode_led(i);
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	4a1e      	ldr	r2, [pc, #120]	; (8000418 <reading_button+0xdc>)
 80003a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d103      	bne.n	80003b0 <reading_button+0x74>
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fba4 	bl	8000af8 <update_mode_led>

				if(counterForButtonPress1s[i] < DURATION_OF_AUTO_INCREASING){
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4a19      	ldr	r2, [pc, #100]	; (8000418 <reading_button+0xdc>)
 80003b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b8:	2b63      	cmp	r3, #99	; 0x63
 80003ba:	d809      	bhi.n	80003d0 <reading_button+0x94>
					counterForButtonPress1s[i]++;
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	4a16      	ldr	r2, [pc, #88]	; (8000418 <reading_button+0xdc>)
 80003c0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003c4:	3201      	adds	r2, #1
 80003c6:	b291      	uxth	r1, r2
 80003c8:	4a13      	ldr	r2, [pc, #76]	; (8000418 <reading_button+0xdc>)
 80003ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003ce:	e00d      	b.n	80003ec <reading_button+0xb0>
				}else{
					flagForButtonPress1s[i] = 1;
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	4a12      	ldr	r2, [pc, #72]	; (800041c <reading_button+0xe0>)
 80003d4:	2101      	movs	r1, #1
 80003d6:	54d1      	strb	r1, [r2, r3]
 80003d8:	e008      	b.n	80003ec <reading_button+0xb0>
					//Show on the screen the guide that how to use corresponding mode
				}
			}else{
				counterForButtonPress1s[i] = 0;
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <reading_button+0xdc>)
 80003de:	2100      	movs	r1, #0
 80003e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	4a0d      	ldr	r2, [pc, #52]	; (800041c <reading_button+0xe0>)
 80003e8:	2100      	movs	r1, #0
 80003ea:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<NUMBER_OF_BUTTONS; i++){
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	3301      	adds	r3, #1
 80003f0:	71fb      	strb	r3, [r7, #7]
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	d9a7      	bls.n	8000348 <reading_button+0xc>
			}
		}

	}
}
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd90      	pop	{r4, r7, pc}
 8000402:	bf00      	nop
 8000404:	20000150 	.word	0x20000150
 8000408:	20000154 	.word	0x20000154
 800040c:	20000008 	.word	0x20000008
 8000410:	20000000 	.word	0x20000000
 8000414:	2000014c 	.word	0x2000014c
 8000418:	20000158 	.word	0x20000158
 800041c:	20000160 	.word	0x20000160

08000420 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_OF_BUTTONS)return 0;
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b03      	cmp	r3, #3
 800042e:	d901      	bls.n	8000434 <is_button_pressed+0x14>
 8000430:	2300      	movs	r3, #0
 8000432:	e007      	b.n	8000444 <is_button_pressed+0x24>
	else{
		return buttonBuffer[index] == BUTTON_IS_PRESSED;
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	4a06      	ldr	r2, [pc, #24]	; (8000450 <is_button_pressed+0x30>)
 8000438:	5cd3      	ldrb	r3, [r2, r3]
 800043a:	2b00      	cmp	r3, #0
 800043c:	bf0c      	ite	eq
 800043e:	2301      	moveq	r3, #1
 8000440:	2300      	movne	r3, #0
 8000442:	b2db      	uxtb	r3, r3
	}
}
 8000444:	4618      	mov	r0, r3
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	2000014c 	.word	0x2000014c

08000454 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(uint8_t index){
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_OF_BUTTONS)return 0xff;
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b03      	cmp	r3, #3
 8000462:	d901      	bls.n	8000468 <is_button_pressed_1s+0x14>
 8000464:	23ff      	movs	r3, #255	; 0xff
 8000466:	e007      	b.n	8000478 <is_button_pressed_1s+0x24>
	return flagForButtonPress1s[index] == 1;
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	4a06      	ldr	r2, [pc, #24]	; (8000484 <is_button_pressed_1s+0x30>)
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	2b01      	cmp	r3, #1
 8000470:	bf0c      	ite	eq
 8000472:	2301      	moveq	r3, #1
 8000474:	2300      	movne	r3, #0
 8000476:	b2db      	uxtb	r3, r3
}
 8000478:	4618      	mov	r0, r3
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	20000160 	.word	0x20000160

08000488 <update_buffer_traffic_7seg_leds>:
		L30_PORT, L60_PORT, L90_PORT,
		COOL_PORT, WARM_PORT, HOT_PORT
};

/////////////////////    MAIN   /////////////////////////////////
void update_buffer_traffic_7seg_leds(uint8_t value1, uint8_t value2){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	460a      	mov	r2, r1
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	4613      	mov	r3, r2
 8000496:	71bb      	strb	r3, [r7, #6]
	update_seven_segment_led_buffer(0, value1);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4619      	mov	r1, r3
 800049c:	2000      	movs	r0, #0
 800049e:	f000 fa6b 	bl	8000978 <update_seven_segment_led_buffer>
	update_seven_segment_led_buffer(1, value2);
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	4619      	mov	r1, r3
 80004a6:	2001      	movs	r0, #1
 80004a8:	f000 fa66 	bl	8000978 <update_seven_segment_led_buffer>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <Washing_Light_Init>:

void Washing_Light_Init(wState State){
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
	Washing_state = State;
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <Washing_Light_Init+0x1c>)
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	7013      	strb	r3, [r2, #0]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000166 	.word	0x20000166

080004d4 <Washing_Update>:
//	}
//	update_buffer_traffic_7seg_leds(lane1, lane2);
	return;
}
//
void Washing_Update(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	if(reset == 1){
 80004d8:	4b80      	ldr	r3, [pc, #512]	; (80006dc <Washing_Update+0x208>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	f000 80fb 	beq.w	80006d8 <Washing_Update+0x204>
		return;
	}else{
		switch(Washing_state){
 80004e2:	4b7f      	ldr	r3, [pc, #508]	; (80006e0 <Washing_Update+0x20c>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b05      	cmp	r3, #5
 80004e8:	f200 80c2 	bhi.w	8000670 <Washing_Update+0x19c>
 80004ec:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <Washing_Update+0x20>)
 80004ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f2:	bf00      	nop
 80004f4:	0800050d 	.word	0x0800050d
 80004f8:	08000557 	.word	0x08000557
 80004fc:	08000595 	.word	0x08000595
 8000500:	080005d3 	.word	0x080005d3
 8000504:	08000611 	.word	0x08000611
 8000508:	08000641 	.word	0x08000641
			case READY:
				HAL_GPIO_TogglePin(QUICK_PORT, QUICK_PIN);
 800050c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000510:	4874      	ldr	r0, [pc, #464]	; (80006e4 <Washing_Update+0x210>)
 8000512:	f001 fb7c 	bl	8001c0e <HAL_GPIO_TogglePin>
				if((++Time_in_State)/10 == 10){
 8000516:	4b74      	ldr	r3, [pc, #464]	; (80006e8 <Washing_Update+0x214>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	b29a      	uxth	r2, r3
 800051e:	4b72      	ldr	r3, [pc, #456]	; (80006e8 <Washing_Update+0x214>)
 8000520:	801a      	strh	r2, [r3, #0]
 8000522:	4b71      	ldr	r3, [pc, #452]	; (80006e8 <Washing_Update+0x214>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	4a71      	ldr	r2, [pc, #452]	; (80006ec <Washing_Update+0x218>)
 8000528:	fba2 2303 	umull	r2, r3, r2, r3
 800052c:	08db      	lsrs	r3, r3, #3
 800052e:	b29b      	uxth	r3, r3
 8000530:	2b0a      	cmp	r3, #10
 8000532:	f040 809f 	bne.w	8000674 <Washing_Update+0x1a0>
					Washing_state = FILL_WATER;
 8000536:	4b6a      	ldr	r3, [pc, #424]	; (80006e0 <Washing_Update+0x20c>)
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
					washDuration = NORMAL_DURATION;
 800053c:	4b6c      	ldr	r3, [pc, #432]	; (80006f0 <Washing_Update+0x21c>)
 800053e:	221e      	movs	r2, #30
 8000540:	801a      	strh	r2, [r3, #0]
					waterLevel = L90_DURATION;
 8000542:	4b6c      	ldr	r3, [pc, #432]	; (80006f4 <Washing_Update+0x220>)
 8000544:	225a      	movs	r2, #90	; 0x5a
 8000546:	801a      	strh	r2, [r3, #0]
					tempLevel = WARM_DURATION;
 8000548:	4b6b      	ldr	r3, [pc, #428]	; (80006f8 <Washing_Update+0x224>)
 800054a:	221e      	movs	r2, #30
 800054c:	801a      	strh	r2, [r3, #0]
					Time_in_State = 0;
 800054e:	4b66      	ldr	r3, [pc, #408]	; (80006e8 <Washing_Update+0x214>)
 8000550:	2200      	movs	r2, #0
 8000552:	801a      	strh	r2, [r3, #0]
				}
				//ERROR HANDLE
				break;
 8000554:	e08e      	b.n	8000674 <Washing_Update+0x1a0>
			case FILL_WATER:
				if(++Time_in_State/10 == waterLevel/10){
 8000556:	4b64      	ldr	r3, [pc, #400]	; (80006e8 <Washing_Update+0x214>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	b29a      	uxth	r2, r3
 800055e:	4b62      	ldr	r3, [pc, #392]	; (80006e8 <Washing_Update+0x214>)
 8000560:	801a      	strh	r2, [r3, #0]
 8000562:	4b61      	ldr	r3, [pc, #388]	; (80006e8 <Washing_Update+0x214>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	4a61      	ldr	r2, [pc, #388]	; (80006ec <Washing_Update+0x218>)
 8000568:	fba2 2303 	umull	r2, r3, r2, r3
 800056c:	08db      	lsrs	r3, r3, #3
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b60      	ldr	r3, [pc, #384]	; (80006f4 <Washing_Update+0x220>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	495d      	ldr	r1, [pc, #372]	; (80006ec <Washing_Update+0x218>)
 8000576:	fba1 1303 	umull	r1, r3, r1, r3
 800057a:	08db      	lsrs	r3, r3, #3
 800057c:	b29b      	uxth	r3, r3
 800057e:	429a      	cmp	r2, r3
 8000580:	d17a      	bne.n	8000678 <Washing_Update+0x1a4>
					Washing_Light_Update();
 8000582:	f000 f8c1 	bl	8000708 <Washing_Light_Update>
					Washing_state = HEAT_WATER;
 8000586:	4b56      	ldr	r3, [pc, #344]	; (80006e0 <Washing_Update+0x20c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
					Time_in_State = 0;
 800058c:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <Washing_Update+0x214>)
 800058e:	2200      	movs	r2, #0
 8000590:	801a      	strh	r2, [r3, #0]
				}
				//ERROR HANDLE
				break;
 8000592:	e071      	b.n	8000678 <Washing_Update+0x1a4>
			case HEAT_WATER:
				if(++Time_in_State/10 == tempLevel/10){
 8000594:	4b54      	ldr	r3, [pc, #336]	; (80006e8 <Washing_Update+0x214>)
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	b29a      	uxth	r2, r3
 800059c:	4b52      	ldr	r3, [pc, #328]	; (80006e8 <Washing_Update+0x214>)
 800059e:	801a      	strh	r2, [r3, #0]
 80005a0:	4b51      	ldr	r3, [pc, #324]	; (80006e8 <Washing_Update+0x214>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	4a51      	ldr	r2, [pc, #324]	; (80006ec <Washing_Update+0x218>)
 80005a6:	fba2 2303 	umull	r2, r3, r2, r3
 80005aa:	08db      	lsrs	r3, r3, #3
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b52      	ldr	r3, [pc, #328]	; (80006f8 <Washing_Update+0x224>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	494e      	ldr	r1, [pc, #312]	; (80006ec <Washing_Update+0x218>)
 80005b4:	fba1 1303 	umull	r1, r3, r1, r3
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	429a      	cmp	r2, r3
 80005be:	d15d      	bne.n	800067c <Washing_Update+0x1a8>
					Washing_Light_Update();
 80005c0:	f000 f8a2 	bl	8000708 <Washing_Light_Update>
					Washing_state = WASH;
 80005c4:	4b46      	ldr	r3, [pc, #280]	; (80006e0 <Washing_Update+0x20c>)
 80005c6:	2203      	movs	r2, #3
 80005c8:	701a      	strb	r2, [r3, #0]
					Time_in_State = 0;
 80005ca:	4b47      	ldr	r3, [pc, #284]	; (80006e8 <Washing_Update+0x214>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	801a      	strh	r2, [r3, #0]
				}
				//ERROR HANDLE
				break;
 80005d0:	e054      	b.n	800067c <Washing_Update+0x1a8>
			case WASH:
				if(++Time_in_State/10 == washDuration/10){
 80005d2:	4b45      	ldr	r3, [pc, #276]	; (80006e8 <Washing_Update+0x214>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	b29a      	uxth	r2, r3
 80005da:	4b43      	ldr	r3, [pc, #268]	; (80006e8 <Washing_Update+0x214>)
 80005dc:	801a      	strh	r2, [r3, #0]
 80005de:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <Washing_Update+0x214>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	4a42      	ldr	r2, [pc, #264]	; (80006ec <Washing_Update+0x218>)
 80005e4:	fba2 2303 	umull	r2, r3, r2, r3
 80005e8:	08db      	lsrs	r3, r3, #3
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <Washing_Update+0x21c>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	493e      	ldr	r1, [pc, #248]	; (80006ec <Washing_Update+0x218>)
 80005f2:	fba1 1303 	umull	r1, r3, r1, r3
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d140      	bne.n	8000680 <Washing_Update+0x1ac>
					Washing_Light_Update();
 80005fe:	f000 f883 	bl	8000708 <Washing_Light_Update>
					Washing_state = RINSE;
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <Washing_Update+0x20c>)
 8000604:	2204      	movs	r2, #4
 8000606:	701a      	strb	r2, [r3, #0]
					Time_in_State = 0;
 8000608:	4b37      	ldr	r3, [pc, #220]	; (80006e8 <Washing_Update+0x214>)
 800060a:	2200      	movs	r2, #0
 800060c:	801a      	strh	r2, [r3, #0]
				}
				//ERROR HANDLE
				break;
 800060e:	e037      	b.n	8000680 <Washing_Update+0x1ac>
			case RINSE:
				if(++Time_in_State/10 == RINSE_DURATION/10){
 8000610:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <Washing_Update+0x214>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <Washing_Update+0x214>)
 800061a:	801a      	strh	r2, [r3, #0]
 800061c:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <Washing_Update+0x214>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <Washing_Update+0x218>)
 8000622:	fba2 2303 	umull	r2, r3, r2, r3
 8000626:	08db      	lsrs	r3, r3, #3
 8000628:	b29b      	uxth	r3, r3
 800062a:	2b04      	cmp	r3, #4
 800062c:	d12a      	bne.n	8000684 <Washing_Update+0x1b0>
					Washing_Light_Update();
 800062e:	f000 f86b 	bl	8000708 <Washing_Light_Update>
					Washing_state = SPIN;
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <Washing_Update+0x20c>)
 8000634:	2205      	movs	r2, #5
 8000636:	701a      	strb	r2, [r3, #0]
					Time_in_State = 0;
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <Washing_Update+0x214>)
 800063a:	2200      	movs	r2, #0
 800063c:	801a      	strh	r2, [r3, #0]
				}
				//ERROR HANDLE
				break;
 800063e:	e021      	b.n	8000684 <Washing_Update+0x1b0>
			case SPIN:
				if(++Time_in_State/10 == SPIN_DURATION/10){
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <Washing_Update+0x214>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <Washing_Update+0x214>)
 800064a:	801a      	strh	r2, [r3, #0]
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <Washing_Update+0x214>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <Washing_Update+0x218>)
 8000652:	fba2 2303 	umull	r2, r3, r2, r3
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	b29b      	uxth	r3, r3
 800065a:	2b04      	cmp	r3, #4
 800065c:	d114      	bne.n	8000688 <Washing_Update+0x1b4>
					Washing_Light_Update();
 800065e:	f000 f853 	bl	8000708 <Washing_Light_Update>
					Washing_state = READY;
 8000662:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <Washing_Update+0x20c>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
					Time_in_State = 0;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <Washing_Update+0x214>)
 800066a:	2200      	movs	r2, #0
 800066c:	801a      	strh	r2, [r3, #0]
				}
				//ERROR HANDLE
				break;
 800066e:	e00b      	b.n	8000688 <Washing_Update+0x1b4>
			default:
				break;
 8000670:	bf00      	nop
 8000672:	e00a      	b.n	800068a <Washing_Update+0x1b6>
				break;
 8000674:	bf00      	nop
 8000676:	e008      	b.n	800068a <Washing_Update+0x1b6>
				break;
 8000678:	bf00      	nop
 800067a:	e006      	b.n	800068a <Washing_Update+0x1b6>
				break;
 800067c:	bf00      	nop
 800067e:	e004      	b.n	800068a <Washing_Update+0x1b6>
				break;
 8000680:	bf00      	nop
 8000682:	e002      	b.n	800068a <Washing_Update+0x1b6>
				break;
 8000684:	bf00      	nop
 8000686:	e000      	b.n	800068a <Washing_Update+0x1b6>
				break;
 8000688:	bf00      	nop
		}
	}
	value1 = Time_in_State/100;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <Washing_Update+0x214>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <Washing_Update+0x228>)
 8000690:	fba2 2303 	umull	r2, r3, r2, r3
 8000694:	095b      	lsrs	r3, r3, #5
 8000696:	b29b      	uxth	r3, r3
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <Washing_Update+0x22c>)
 800069c:	701a      	strb	r2, [r3, #0]
	value2 = (Time_in_State/10)%10;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <Washing_Update+0x214>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <Washing_Update+0x218>)
 80006a4:	fba2 2303 	umull	r2, r3, r2, r3
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <Washing_Update+0x218>)
 80006ae:	fba3 1302 	umull	r1, r3, r3, r2
 80006b2:	08d9      	lsrs	r1, r3, #3
 80006b4:	460b      	mov	r3, r1
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	440b      	add	r3, r1
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <Washing_Update+0x230>)
 80006c4:	701a      	strb	r2, [r3, #0]
	update_buffer_traffic_7seg_leds(value1, value2);
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <Washing_Update+0x22c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <Washing_Update+0x230>)
 80006cc:	7812      	ldrb	r2, [r2, #0]
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fed9 	bl	8000488 <update_buffer_traffic_7seg_leds>
 80006d6:	e000      	b.n	80006da <Washing_Update+0x206>
		return;
 80006d8:	bf00      	nop
}
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000018 	.word	0x20000018
 80006e0:	20000166 	.word	0x20000166
 80006e4:	40010800 	.word	0x40010800
 80006e8:	20000168 	.word	0x20000168
 80006ec:	cccccccd 	.word	0xcccccccd
 80006f0:	2000001a 	.word	0x2000001a
 80006f4:	2000001c 	.word	0x2000001c
 80006f8:	2000001e 	.word	0x2000001e
 80006fc:	51eb851f 	.word	0x51eb851f
 8000700:	20000164 	.word	0x20000164
 8000704:	20000165 	.word	0x20000165

08000708 <Washing_Light_Update>:
void Washing_Light_Update(){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	if(Washing_state == FILL_WATER){
 800070c:	4b6e      	ldr	r3, [pc, #440]	; (80008c8 <Washing_Light_Update+0x1c0>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d144      	bne.n	800079e <Washing_Light_Update+0x96>
		if(Time_in_State < L30_DURATION){
 8000714:	4b6d      	ldr	r3, [pc, #436]	; (80008cc <Washing_Light_Update+0x1c4>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	2b1d      	cmp	r3, #29
 800071a:	d808      	bhi.n	800072e <Washing_Light_Update+0x26>
			HAL_GPIO_TogglePin(functionDataPort[3], functionDataPin[3]);
 800071c:	4b6c      	ldr	r3, [pc, #432]	; (80008d0 <Washing_Light_Update+0x1c8>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	4a6c      	ldr	r2, [pc, #432]	; (80008d4 <Washing_Light_Update+0x1cc>)
 8000722:	88d2      	ldrh	r2, [r2, #6]
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fa71 	bl	8001c0e <HAL_GPIO_TogglePin>
		else if(washDuration == SOAK_DURATION){
			HAL_GPIO_WritePin(functionDataPort[1], functionDataPin[1], OFF);
			HAL_GPIO_WritePin(functionDataPort[2], functionDataPin[2], ON);
		}
	}
	return;
 800072c:	e0ca      	b.n	80008c4 <Washing_Light_Update+0x1bc>
		else if(Time_in_State == L30_DURATION){
 800072e:	4b67      	ldr	r3, [pc, #412]	; (80008cc <Washing_Light_Update+0x1c4>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	2b1e      	cmp	r3, #30
 8000734:	d108      	bne.n	8000748 <Washing_Light_Update+0x40>
			HAL_GPIO_WritePin(functionDataPort[3], functionDataPin[3], ON);
 8000736:	4b66      	ldr	r3, [pc, #408]	; (80008d0 <Washing_Light_Update+0x1c8>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	4a66      	ldr	r2, [pc, #408]	; (80008d4 <Washing_Light_Update+0x1cc>)
 800073c:	88d1      	ldrh	r1, [r2, #6]
 800073e:	2201      	movs	r2, #1
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fa4c 	bl	8001bde <HAL_GPIO_WritePin>
	return;
 8000746:	e0bd      	b.n	80008c4 <Washing_Light_Update+0x1bc>
		else if(Time_in_State == L60_DURATION){
 8000748:	4b60      	ldr	r3, [pc, #384]	; (80008cc <Washing_Light_Update+0x1c4>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	2b3c      	cmp	r3, #60	; 0x3c
 800074e:	d110      	bne.n	8000772 <Washing_Light_Update+0x6a>
			HAL_GPIO_WritePin(functionDataPort[3], functionDataPin[3], OFF);
 8000750:	4b5f      	ldr	r3, [pc, #380]	; (80008d0 <Washing_Light_Update+0x1c8>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	4a5f      	ldr	r2, [pc, #380]	; (80008d4 <Washing_Light_Update+0x1cc>)
 8000756:	88d1      	ldrh	r1, [r2, #6]
 8000758:	2200      	movs	r2, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fa3f 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(functionDataPort[4], functionDataPin[4], ON);
 8000760:	4b5b      	ldr	r3, [pc, #364]	; (80008d0 <Washing_Light_Update+0x1c8>)
 8000762:	691b      	ldr	r3, [r3, #16]
 8000764:	4a5b      	ldr	r2, [pc, #364]	; (80008d4 <Washing_Light_Update+0x1cc>)
 8000766:	8911      	ldrh	r1, [r2, #8]
 8000768:	2201      	movs	r2, #1
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fa37 	bl	8001bde <HAL_GPIO_WritePin>
	return;
 8000770:	e0a8      	b.n	80008c4 <Washing_Light_Update+0x1bc>
		else if(Time_in_State == L90_DURATION){
 8000772:	4b56      	ldr	r3, [pc, #344]	; (80008cc <Washing_Light_Update+0x1c4>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2b5a      	cmp	r3, #90	; 0x5a
 8000778:	f040 80a4 	bne.w	80008c4 <Washing_Light_Update+0x1bc>
			HAL_GPIO_WritePin(functionDataPort[4], functionDataPin[4], OFF);
 800077c:	4b54      	ldr	r3, [pc, #336]	; (80008d0 <Washing_Light_Update+0x1c8>)
 800077e:	691b      	ldr	r3, [r3, #16]
 8000780:	4a54      	ldr	r2, [pc, #336]	; (80008d4 <Washing_Light_Update+0x1cc>)
 8000782:	8911      	ldrh	r1, [r2, #8]
 8000784:	2200      	movs	r2, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fa29 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(functionDataPort[5], functionDataPin[5], ON);
 800078c:	4b50      	ldr	r3, [pc, #320]	; (80008d0 <Washing_Light_Update+0x1c8>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	4a50      	ldr	r2, [pc, #320]	; (80008d4 <Washing_Light_Update+0x1cc>)
 8000792:	8951      	ldrh	r1, [r2, #10]
 8000794:	2201      	movs	r2, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fa21 	bl	8001bde <HAL_GPIO_WritePin>
	return;
 800079c:	e092      	b.n	80008c4 <Washing_Light_Update+0x1bc>
	else if(Washing_state == HEAT_WATER){
 800079e:	4b4a      	ldr	r3, [pc, #296]	; (80008c8 <Washing_Light_Update+0x1c0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d143      	bne.n	800082e <Washing_Light_Update+0x126>
		if(Time_in_State < COOL_DURATION){
 80007a6:	4b49      	ldr	r3, [pc, #292]	; (80008cc <Washing_Light_Update+0x1c4>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b13      	cmp	r3, #19
 80007ac:	d808      	bhi.n	80007c0 <Washing_Light_Update+0xb8>
			HAL_GPIO_TogglePin(functionDataPort[6], functionDataPin[6]);
 80007ae:	4b48      	ldr	r3, [pc, #288]	; (80008d0 <Washing_Light_Update+0x1c8>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a48      	ldr	r2, [pc, #288]	; (80008d4 <Washing_Light_Update+0x1cc>)
 80007b4:	8992      	ldrh	r2, [r2, #12]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fa28 	bl	8001c0e <HAL_GPIO_TogglePin>
	return;
 80007be:	e081      	b.n	80008c4 <Washing_Light_Update+0x1bc>
		else if(Time_in_State == COOL_DURATION){
 80007c0:	4b42      	ldr	r3, [pc, #264]	; (80008cc <Washing_Light_Update+0x1c4>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	2b14      	cmp	r3, #20
 80007c6:	d108      	bne.n	80007da <Washing_Light_Update+0xd2>
			HAL_GPIO_WritePin(functionDataPort[6], functionDataPin[6], ON);
 80007c8:	4b41      	ldr	r3, [pc, #260]	; (80008d0 <Washing_Light_Update+0x1c8>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a41      	ldr	r2, [pc, #260]	; (80008d4 <Washing_Light_Update+0x1cc>)
 80007ce:	8991      	ldrh	r1, [r2, #12]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fa03 	bl	8001bde <HAL_GPIO_WritePin>
	return;
 80007d8:	e074      	b.n	80008c4 <Washing_Light_Update+0x1bc>
		else if(Time_in_State == WARM_DURATION){
 80007da:	4b3c      	ldr	r3, [pc, #240]	; (80008cc <Washing_Light_Update+0x1c4>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	2b1e      	cmp	r3, #30
 80007e0:	d110      	bne.n	8000804 <Washing_Light_Update+0xfc>
			HAL_GPIO_WritePin(functionDataPort[6], functionDataPin[6], OFF);
 80007e2:	4b3b      	ldr	r3, [pc, #236]	; (80008d0 <Washing_Light_Update+0x1c8>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	4a3b      	ldr	r2, [pc, #236]	; (80008d4 <Washing_Light_Update+0x1cc>)
 80007e8:	8991      	ldrh	r1, [r2, #12]
 80007ea:	2200      	movs	r2, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 f9f6 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(functionDataPort[7], functionDataPin[7], ON);
 80007f2:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <Washing_Light_Update+0x1c8>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a37      	ldr	r2, [pc, #220]	; (80008d4 <Washing_Light_Update+0x1cc>)
 80007f8:	89d1      	ldrh	r1, [r2, #14]
 80007fa:	2201      	movs	r2, #1
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 f9ee 	bl	8001bde <HAL_GPIO_WritePin>
	return;
 8000802:	e05f      	b.n	80008c4 <Washing_Light_Update+0x1bc>
		else if(Time_in_State == HOT_DURATION){
 8000804:	4b31      	ldr	r3, [pc, #196]	; (80008cc <Washing_Light_Update+0x1c4>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	2b32      	cmp	r3, #50	; 0x32
 800080a:	d15b      	bne.n	80008c4 <Washing_Light_Update+0x1bc>
			HAL_GPIO_WritePin(functionDataPort[7], functionDataPin[7], OFF);
 800080c:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <Washing_Light_Update+0x1c8>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	4a30      	ldr	r2, [pc, #192]	; (80008d4 <Washing_Light_Update+0x1cc>)
 8000812:	89d1      	ldrh	r1, [r2, #14]
 8000814:	2200      	movs	r2, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f001 f9e1 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(functionDataPort[8], functionDataPin[8], ON);
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <Washing_Light_Update+0x1c8>)
 800081e:	6a1b      	ldr	r3, [r3, #32]
 8000820:	4a2c      	ldr	r2, [pc, #176]	; (80008d4 <Washing_Light_Update+0x1cc>)
 8000822:	8a11      	ldrh	r1, [r2, #16]
 8000824:	2201      	movs	r2, #1
 8000826:	4618      	mov	r0, r3
 8000828:	f001 f9d9 	bl	8001bde <HAL_GPIO_WritePin>
	return;
 800082c:	e04a      	b.n	80008c4 <Washing_Light_Update+0x1bc>
	else if(Washing_state == WASH){
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <Washing_Light_Update+0x1c0>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b03      	cmp	r3, #3
 8000834:	d146      	bne.n	80008c4 <Washing_Light_Update+0x1bc>
		if(washDuration == QUICK_DURATION){
 8000836:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <Washing_Light_Update+0x1d0>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	2b14      	cmp	r3, #20
 800083c:	d118      	bne.n	8000870 <Washing_Light_Update+0x168>
			HAL_GPIO_WritePin(functionDataPort[0], functionDataPin[0], ON);
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <Washing_Light_Update+0x1c8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <Washing_Light_Update+0x1cc>)
 8000844:	8811      	ldrh	r1, [r2, #0]
 8000846:	2201      	movs	r2, #1
 8000848:	4618      	mov	r0, r3
 800084a:	f001 f9c8 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(functionDataPort[1], functionDataPin[1], OFF);
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <Washing_Light_Update+0x1c8>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <Washing_Light_Update+0x1cc>)
 8000854:	8851      	ldrh	r1, [r2, #2]
 8000856:	2200      	movs	r2, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f001 f9c0 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(functionDataPort[2], functionDataPin[2], OFF);
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <Washing_Light_Update+0x1c8>)
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <Washing_Light_Update+0x1cc>)
 8000864:	8891      	ldrh	r1, [r2, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f001 f9b8 	bl	8001bde <HAL_GPIO_WritePin>
	return;
 800086e:	e029      	b.n	80008c4 <Washing_Light_Update+0x1bc>
		else if(washDuration == NORMAL_DURATION){
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <Washing_Light_Update+0x1d0>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	2b1e      	cmp	r3, #30
 8000876:	d110      	bne.n	800089a <Washing_Light_Update+0x192>
			HAL_GPIO_WritePin(functionDataPort[0], functionDataPin[0], OFF);
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <Washing_Light_Update+0x1c8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <Washing_Light_Update+0x1cc>)
 800087e:	8811      	ldrh	r1, [r2, #0]
 8000880:	2200      	movs	r2, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f9ab 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(functionDataPort[1], functionDataPin[1], ON);
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <Washing_Light_Update+0x1c8>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <Washing_Light_Update+0x1cc>)
 800088e:	8851      	ldrh	r1, [r2, #2]
 8000890:	2201      	movs	r2, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f001 f9a3 	bl	8001bde <HAL_GPIO_WritePin>
	return;
 8000898:	e014      	b.n	80008c4 <Washing_Light_Update+0x1bc>
		else if(washDuration == SOAK_DURATION){
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <Washing_Light_Update+0x1d0>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	2b32      	cmp	r3, #50	; 0x32
 80008a0:	d110      	bne.n	80008c4 <Washing_Light_Update+0x1bc>
			HAL_GPIO_WritePin(functionDataPort[1], functionDataPin[1], OFF);
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <Washing_Light_Update+0x1c8>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <Washing_Light_Update+0x1cc>)
 80008a8:	8851      	ldrh	r1, [r2, #2]
 80008aa:	2200      	movs	r2, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 f996 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(functionDataPort[2], functionDataPin[2], ON);
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <Washing_Light_Update+0x1c8>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <Washing_Light_Update+0x1cc>)
 80008b8:	8891      	ldrh	r1, [r2, #4]
 80008ba:	2201      	movs	r2, #1
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 f98e 	bl	8001bde <HAL_GPIO_WritePin>
	return;
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
}
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000166 	.word	0x20000166
 80008cc:	20000168 	.word	0x20000168
 80008d0:	20000034 	.word	0x20000034
 80008d4:	20000020 	.word	0x20000020
 80008d8:	2000001a 	.word	0x2000001a

080008dc <Run>:
//		Time_in_State = 0;
//		Traffic_Light_Init(RED);
//	}
//}

void Run(uint16_t washing_mode, uint16_t water_level, uint16_t temperature_level){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
 80008e6:	460b      	mov	r3, r1
 80008e8:	80bb      	strh	r3, [r7, #4]
 80008ea:	4613      	mov	r3, r2
 80008ec:	807b      	strh	r3, [r7, #2]
	if((washing_mode != 0)&&(water_level != 0)&&(temperature_level !=0)){
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d01c      	beq.n	800092e <Run+0x52>
 80008f4:	88bb      	ldrh	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d019      	beq.n	800092e <Run+0x52>
 80008fa:	887b      	ldrh	r3, [r7, #2]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d016      	beq.n	800092e <Run+0x52>
		reset = 1 - reset;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <Run+0x88>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	f1c3 0301 	rsb	r3, r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <Run+0x88>)
 800090c:	701a      	strb	r2, [r3, #0]
		washDuration = washing_mode;
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <Run+0x8c>)
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	8013      	strh	r3, [r2, #0]
		waterLevel = water_level;
 8000914:	4a15      	ldr	r2, [pc, #84]	; (800096c <Run+0x90>)
 8000916:	88bb      	ldrh	r3, [r7, #4]
 8000918:	8013      	strh	r3, [r2, #0]
		tempLevel = temperature_level;
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <Run+0x94>)
 800091c:	887b      	ldrh	r3, [r7, #2]
 800091e:	8013      	strh	r3, [r2, #0]
		Time_in_State = 0;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <Run+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	801a      	strh	r2, [r3, #0]
		Washing_Light_Init(FILL_WATER);
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff fdc4 	bl	80004b4 <Washing_Light_Init>
 800092c:	e015      	b.n	800095a <Run+0x7e>
	}else{
		reset = 1 - reset;
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <Run+0x88>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	f1c3 0301 	rsb	r3, r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <Run+0x88>)
 800093a:	701a      	strb	r2, [r3, #0]
		washDuration = NORMAL_DURATION;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <Run+0x8c>)
 800093e:	221e      	movs	r2, #30
 8000940:	801a      	strh	r2, [r3, #0]
		waterLevel = L90_DURATION;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <Run+0x90>)
 8000944:	225a      	movs	r2, #90	; 0x5a
 8000946:	801a      	strh	r2, [r3, #0]
		tempLevel = WARM_DURATION;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <Run+0x94>)
 800094a:	221e      	movs	r2, #30
 800094c:	801a      	strh	r2, [r3, #0]
		Time_in_State = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <Run+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	801a      	strh	r2, [r3, #0]
		Washing_Light_Init(FILL_WATER);
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff fdad 	bl	80004b4 <Washing_Light_Init>
	}
	return;
 800095a:	bf00      	nop
}
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000018 	.word	0x20000018
 8000968:	2000001a 	.word	0x2000001a
 800096c:	2000001c 	.word	0x2000001c
 8000970:	2000001e 	.word	0x2000001e
 8000974:	20000168 	.word	0x20000168

08000978 <update_seven_segment_led_buffer>:
static GPIO_TypeDef * modeSevenSegmentControlPort[2] = {
		ENABLE_7SEG_01_PORT, ENABLE_7SEG_02_PORT
};
////////////////////////// FUNCTION CONFIGURATION ///////////////////////////////
// STATE LED CONFIGURATION
void update_seven_segment_led_buffer(uint8_t index, uint8_t value){
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	4613      	mov	r3, r2
 8000986:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_OF_SEVEN_SEGMENT_LED) return;
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d807      	bhi.n	800099e <update_seven_segment_led_buffer+0x26>
	if(value > 9) return ;
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	2b09      	cmp	r3, #9
 8000992:	d806      	bhi.n	80009a2 <update_seven_segment_led_buffer+0x2a>
	sevenSegmentLEDBuffer[index] = value;
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	4905      	ldr	r1, [pc, #20]	; (80009ac <update_seven_segment_led_buffer+0x34>)
 8000998:	79ba      	ldrb	r2, [r7, #6]
 800099a:	54ca      	strb	r2, [r1, r3]
	return;
 800099c:	e002      	b.n	80009a4 <update_seven_segment_led_buffer+0x2c>
	if(index >= NUMBER_OF_SEVEN_SEGMENT_LED) return;
 800099e:	bf00      	nop
 80009a0:	e000      	b.n	80009a4 <update_seven_segment_led_buffer+0x2c>
	if(value > 9) return ;
 80009a2:	bf00      	nop
}
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	2000016c 	.word	0x2000016c

080009b0 <seven_segment_data_output>:

void seven_segment_data_output(uint8_t value){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	uint8_t index;
	for(index = 0; index < 7; index ++){
 80009ba:	2300      	movs	r3, #0
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	e023      	b.n	8000a08 <seven_segment_data_output+0x58>
			if((value>>index) & 0x01){
 80009c0:	79fa      	ldrb	r2, [r7, #7]
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	fa42 f303 	asr.w	r3, r2, r3
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00c      	beq.n	80009ea <seven_segment_data_output+0x3a>
				HAL_GPIO_WritePin(sevenSegmentDataPort[index], sevenSegmentDataPin[index], RESET);
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <seven_segment_data_output+0x68>)
 80009d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <seven_segment_data_output+0x6c>)
 80009dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009e0:	2200      	movs	r2, #0
 80009e2:	4619      	mov	r1, r3
 80009e4:	f001 f8fb 	bl	8001bde <HAL_GPIO_WritePin>
 80009e8:	e00b      	b.n	8000a02 <seven_segment_data_output+0x52>
			} else {
				HAL_GPIO_WritePin(sevenSegmentDataPort[index], sevenSegmentDataPin[index],	SET);
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <seven_segment_data_output+0x68>)
 80009ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <seven_segment_data_output+0x6c>)
 80009f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009fa:	2201      	movs	r2, #1
 80009fc:	4619      	mov	r1, r3
 80009fe:	f001 f8ee 	bl	8001bde <HAL_GPIO_WritePin>
	for(index = 0; index < 7; index ++){
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	3301      	adds	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d9d8      	bls.n	80009c0 <seven_segment_data_output+0x10>
			}
		}
}
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000074 	.word	0x20000074
 8000a1c:	20000064 	.word	0x20000064

08000a20 <clear_previous_seven_segment_led>:

void clear_previous_seven_segment_led(uint8_t index){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_OF_SEVEN_SEGMENT_LED) return;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d80c      	bhi.n	8000a4a <clear_previous_seven_segment_led+0x2a>
	HAL_GPIO_WritePin(sevenSegmentControlPort[index], sevenSegmentControlPin[index], SET);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <clear_previous_seven_segment_led+0x34>)
 8000a34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <clear_previous_seven_segment_led+0x38>)
 8000a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a40:	2201      	movs	r2, #1
 8000a42:	4619      	mov	r1, r3
 8000a44:	f001 f8cb 	bl	8001bde <HAL_GPIO_WritePin>
 8000a48:	e000      	b.n	8000a4c <clear_previous_seven_segment_led+0x2c>
	if(index >= NUMBER_OF_SEVEN_SEGMENT_LED) return;
 8000a4a:	bf00      	nop
}
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000098 	.word	0x20000098
 8000a58:	20000094 	.word	0x20000094

08000a5c <set_current_seven_segment_led>:

void set_current_seven_segment_led(uint8_t index){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_OF_SEVEN_SEGMENT_LED) return;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d80c      	bhi.n	8000a86 <set_current_seven_segment_led+0x2a>
	HAL_GPIO_WritePin(sevenSegmentControlPort[index], sevenSegmentControlPin[index], RESET);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <set_current_seven_segment_led+0x34>)
 8000a70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <set_current_seven_segment_led+0x38>)
 8000a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f001 f8ad 	bl	8001bde <HAL_GPIO_WritePin>
 8000a84:	e000      	b.n	8000a88 <set_current_seven_segment_led+0x2c>
	if(index >= NUMBER_OF_SEVEN_SEGMENT_LED) return;
 8000a86:	bf00      	nop
}
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000098 	.word	0x20000098
 8000a94:	20000094 	.word	0x20000094

08000a98 <seven_segment_led_driver>:

void seven_segment_led_driver(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	static uint8_t led_index = 0;
	uint8_t tempData;
	// clear previous led data
	clear_previous_seven_segment_led(led_index);
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <seven_segment_led_driver+0x54>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ffbc 	bl	8000a20 <clear_previous_seven_segment_led>
	// current led data setting
	led_index = (led_index + 1) % NUMBER_OF_SEVEN_SEGMENT_LED;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <seven_segment_led_driver+0x54>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	bfb8      	it	lt
 8000ab6:	425b      	neglt	r3, r3
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <seven_segment_led_driver+0x54>)
 8000abc:	701a      	strb	r2, [r3, #0]
	tempData = sevenSegmentLEDConversion[sevenSegmentLEDBuffer[led_index]];
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <seven_segment_led_driver+0x54>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <seven_segment_led_driver+0x58>)
 8000ac6:	5c9b      	ldrb	r3, [r3, r2]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <seven_segment_led_driver+0x5c>)
 8000acc:	5c9b      	ldrb	r3, [r3, r2]
 8000ace:	71fb      	strb	r3, [r7, #7]
	seven_segment_data_output(tempData);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff6c 	bl	80009b0 <seven_segment_data_output>
	set_current_seven_segment_led(led_index);
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <seven_segment_led_driver+0x54>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ffbd 	bl	8000a5c <set_current_seven_segment_led>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000017a 	.word	0x2000017a
 8000af0:	2000016c 	.word	0x2000016c
 8000af4:	20000058 	.word	0x20000058

08000af8 <update_mode_led>:
static uint8_t setting = 0;
static uint16_t washing_mode, water_level, temperature_level = 0;
static uint16_t wTimeArray[4]={0,20,30,50};
static uint16_t tLevelArray[4]={0,20,30,50};

void update_mode_led(uint8_t number){ // number is the order of button
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
	switch(number){
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	f200 80cc 	bhi.w	8000ca2 <update_mode_led+0x1aa>
 8000b0a:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <update_mode_led+0x18>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b21 	.word	0x08000b21
 8000b14:	08000b3d 	.word	0x08000b3d
 8000b18:	08000bd5 	.word	0x08000bd5
 8000b1c:	08000c4b 	.word	0x08000c4b
		case 0:        		//CHOOSE_SETTING
			setting = (setting+1) % 4;
 8000b20:	4b92      	ldr	r3, [pc, #584]	; (8000d6c <update_mode_led+0x274>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	425a      	negs	r2, r3
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	f002 0203 	and.w	r2, r2, #3
 8000b30:	bf58      	it	pl
 8000b32:	4253      	negpl	r3, r2
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b8d      	ldr	r3, [pc, #564]	; (8000d6c <update_mode_led+0x274>)
 8000b38:	701a      	strb	r2, [r3, #0]
			break;
 8000b3a:	e0b2      	b.n	8000ca2 <update_mode_led+0x1aa>
		case 1:  			// INCREASE MODE
			if(setting == 0)setting = (setting+1) % 4;
 8000b3c:	4b8b      	ldr	r3, [pc, #556]	; (8000d6c <update_mode_led+0x274>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10c      	bne.n	8000b5e <update_mode_led+0x66>
 8000b44:	4b89      	ldr	r3, [pc, #548]	; (8000d6c <update_mode_led+0x274>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	425a      	negs	r2, r3
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	bf58      	it	pl
 8000b56:	4253      	negpl	r3, r2
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b84      	ldr	r3, [pc, #528]	; (8000d6c <update_mode_led+0x274>)
 8000b5c:	701a      	strb	r2, [r3, #0]
			if(setting == 1)washing_mode = 1 + (washing_mode % 3); // 1.QUICK  2.NORMAL(MIXED)  3.RINSE
 8000b5e:	4b83      	ldr	r3, [pc, #524]	; (8000d6c <update_mode_led+0x274>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d10e      	bne.n	8000b84 <update_mode_led+0x8c>
 8000b66:	4b82      	ldr	r3, [pc, #520]	; (8000d70 <update_mode_led+0x278>)
 8000b68:	881a      	ldrh	r2, [r3, #0]
 8000b6a:	4b82      	ldr	r3, [pc, #520]	; (8000d74 <update_mode_led+0x27c>)
 8000b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b70:	0859      	lsrs	r1, r3, #1
 8000b72:	460b      	mov	r3, r1
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	440b      	add	r3, r1
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	4b7b      	ldr	r3, [pc, #492]	; (8000d70 <update_mode_led+0x278>)
 8000b82:	801a      	strh	r2, [r3, #0]
			if(setting == 2)water_level = 30 + (water_level % 90); // 30% 60% 90%
 8000b84:	4b79      	ldr	r3, [pc, #484]	; (8000d6c <update_mode_led+0x274>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d10f      	bne.n	8000bac <update_mode_led+0xb4>
 8000b8c:	4b7a      	ldr	r3, [pc, #488]	; (8000d78 <update_mode_led+0x280>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	085a      	lsrs	r2, r3, #1
 8000b92:	497a      	ldr	r1, [pc, #488]	; (8000d7c <update_mode_led+0x284>)
 8000b94:	fba1 1202 	umull	r1, r2, r1, r2
 8000b98:	0952      	lsrs	r2, r2, #5
 8000b9a:	215a      	movs	r1, #90	; 0x5a
 8000b9c:	fb01 f202 	mul.w	r2, r1, r2
 8000ba0:	1a9b      	subs	r3, r3, r2
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	331e      	adds	r3, #30
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b73      	ldr	r3, [pc, #460]	; (8000d78 <update_mode_led+0x280>)
 8000baa:	801a      	strh	r2, [r3, #0]
			if(setting == 3)temperature_level = 1+ (temperature_level % 3); // NORMAL  WARM  HOT
 8000bac:	4b6f      	ldr	r3, [pc, #444]	; (8000d6c <update_mode_led+0x274>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d171      	bne.n	8000c98 <update_mode_led+0x1a0>
 8000bb4:	4b72      	ldr	r3, [pc, #456]	; (8000d80 <update_mode_led+0x288>)
 8000bb6:	881a      	ldrh	r2, [r3, #0]
 8000bb8:	4b6e      	ldr	r3, [pc, #440]	; (8000d74 <update_mode_led+0x27c>)
 8000bba:	fba3 1302 	umull	r1, r3, r3, r2
 8000bbe:	0859      	lsrs	r1, r3, #1
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	440b      	add	r3, r1
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	4b6c      	ldr	r3, [pc, #432]	; (8000d80 <update_mode_led+0x288>)
 8000bd0:	801a      	strh	r2, [r3, #0]
			break;
 8000bd2:	e061      	b.n	8000c98 <update_mode_led+0x1a0>
		case 2:             // DECREASE MODE
			if(setting == 0)break;
 8000bd4:	4b65      	ldr	r3, [pc, #404]	; (8000d6c <update_mode_led+0x274>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d05f      	beq.n	8000c9c <update_mode_led+0x1a4>
			if(setting == 1){
 8000bdc:	4b63      	ldr	r3, [pc, #396]	; (8000d6c <update_mode_led+0x274>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d10d      	bne.n	8000c00 <update_mode_led+0x108>
				if(washing_mode == 1)washing_mode = 3;
 8000be4:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <update_mode_led+0x278>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d103      	bne.n	8000bf4 <update_mode_led+0xfc>
 8000bec:	4b60      	ldr	r3, [pc, #384]	; (8000d70 <update_mode_led+0x278>)
 8000bee:	2203      	movs	r2, #3
 8000bf0:	801a      	strh	r2, [r3, #0]
 8000bf2:	e005      	b.n	8000c00 <update_mode_led+0x108>
				else washing_mode--;
 8000bf4:	4b5e      	ldr	r3, [pc, #376]	; (8000d70 <update_mode_led+0x278>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b5c      	ldr	r3, [pc, #368]	; (8000d70 <update_mode_led+0x278>)
 8000bfe:	801a      	strh	r2, [r3, #0]
			}
			if(setting == 2){
 8000c00:	4b5a      	ldr	r3, [pc, #360]	; (8000d6c <update_mode_led+0x274>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d10d      	bne.n	8000c24 <update_mode_led+0x12c>
				if(water_level == 30)water_level = 90;
 8000c08:	4b5b      	ldr	r3, [pc, #364]	; (8000d78 <update_mode_led+0x280>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	2b1e      	cmp	r3, #30
 8000c0e:	d103      	bne.n	8000c18 <update_mode_led+0x120>
 8000c10:	4b59      	ldr	r3, [pc, #356]	; (8000d78 <update_mode_led+0x280>)
 8000c12:	225a      	movs	r2, #90	; 0x5a
 8000c14:	801a      	strh	r2, [r3, #0]
 8000c16:	e005      	b.n	8000c24 <update_mode_led+0x12c>
				else water_level-=30;
 8000c18:	4b57      	ldr	r3, [pc, #348]	; (8000d78 <update_mode_led+0x280>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	3b1e      	subs	r3, #30
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b55      	ldr	r3, [pc, #340]	; (8000d78 <update_mode_led+0x280>)
 8000c22:	801a      	strh	r2, [r3, #0]
			}
			if(setting == 3){
 8000c24:	4b51      	ldr	r3, [pc, #324]	; (8000d6c <update_mode_led+0x274>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d139      	bne.n	8000ca0 <update_mode_led+0x1a8>
				if(temperature_level == 1)temperature_level = 3;
 8000c2c:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <update_mode_led+0x288>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d103      	bne.n	8000c3c <update_mode_led+0x144>
 8000c34:	4b52      	ldr	r3, [pc, #328]	; (8000d80 <update_mode_led+0x288>)
 8000c36:	2203      	movs	r2, #3
 8000c38:	801a      	strh	r2, [r3, #0]
				else temperature_level--;
			}
			break;
 8000c3a:	e031      	b.n	8000ca0 <update_mode_led+0x1a8>
				else temperature_level--;
 8000c3c:	4b50      	ldr	r3, [pc, #320]	; (8000d80 <update_mode_led+0x288>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	4b4e      	ldr	r3, [pc, #312]	; (8000d80 <update_mode_led+0x288>)
 8000c46:	801a      	strh	r2, [r3, #0]
			break;
 8000c48:	e02a      	b.n	8000ca0 <update_mode_led+0x1a8>
		case 3:            	//  RUN
			for(int i = 0; i<9; i++){
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	e00e      	b.n	8000c6e <update_mode_led+0x176>
				HAL_GPIO_WritePin(functionDataPort[i], functionDataPin[i], OFF);
 8000c50:	4a4c      	ldr	r2, [pc, #304]	; (8000d84 <update_mode_led+0x28c>)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c58:	4a4b      	ldr	r2, [pc, #300]	; (8000d88 <update_mode_led+0x290>)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	f000 ffbb 	bl	8001bde <HAL_GPIO_WritePin>
			for(int i = 0; i<9; i++){
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	dded      	ble.n	8000c50 <update_mode_led+0x158>
			}
			Run(wTimeArray[washing_mode], water_level, tLevelArray[temperature_level]);
 8000c74:	4b3e      	ldr	r3, [pc, #248]	; (8000d70 <update_mode_led+0x278>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <update_mode_led+0x294>)
 8000c7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c80:	4a3d      	ldr	r2, [pc, #244]	; (8000d78 <update_mode_led+0x280>)
 8000c82:	8811      	ldrh	r1, [r2, #0]
 8000c84:	4a3e      	ldr	r2, [pc, #248]	; (8000d80 <update_mode_led+0x288>)
 8000c86:	8812      	ldrh	r2, [r2, #0]
 8000c88:	4610      	mov	r0, r2
 8000c8a:	4a41      	ldr	r2, [pc, #260]	; (8000d90 <update_mode_led+0x298>)
 8000c8c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fe23 	bl	80008dc <Run>
			break;
 8000c96:	e004      	b.n	8000ca2 <update_mode_led+0x1aa>
			break;
 8000c98:	bf00      	nop
 8000c9a:	e002      	b.n	8000ca2 <update_mode_led+0x1aa>
			if(setting == 0)break;
 8000c9c:	bf00      	nop
 8000c9e:	e000      	b.n	8000ca2 <update_mode_led+0x1aa>
			break;
 8000ca0:	bf00      	nop
	}
	// update buffer
	if(number == 3){
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d102      	bne.n	8000cae <update_mode_led+0x1b6>
		Reset_Set_Funtion();
 8000ca8:	f000 f9a0 	bl	8000fec <Reset_Set_Funtion>
		return;
 8000cac:	e18c      	b.n	8000fc8 <update_mode_led+0x4d0>
	}
	if(setting == 0 || number == 0){
 8000cae:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <update_mode_led+0x274>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <update_mode_led+0x1c4>
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d106      	bne.n	8000cca <update_mode_led+0x1d2>
		update_mode_seven_segment_led_buffer(0, setting);
 8000cbc:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <update_mode_led+0x274>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f9b2 	bl	800102c <update_mode_seven_segment_led_buffer>
 8000cc8:	e17e      	b.n	8000fc8 <update_mode_led+0x4d0>
	}
	else if(number == 1 || number == 2){
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d003      	beq.n	8000cd8 <update_mode_led+0x1e0>
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	f040 8178 	bne.w	8000fc8 <update_mode_led+0x4d0>
		if(setting == 0)update_mode_seven_segment_led_buffer(0, setting);
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <update_mode_led+0x274>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d106      	bne.n	8000cee <update_mode_led+0x1f6>
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <update_mode_led+0x274>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f9a0 	bl	800102c <update_mode_seven_segment_led_buffer>
 8000cec:	e16c      	b.n	8000fc8 <update_mode_led+0x4d0>
		else if(setting == 1){
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <update_mode_led+0x274>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	f040 8083 	bne.w	8000dfe <update_mode_led+0x306>
			if(washing_mode == 1){
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <update_mode_led+0x278>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d118      	bne.n	8000d32 <update_mode_led+0x23a>
				HAL_GPIO_WritePin(functionDataPort[0], functionDataPin[0], ON);
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <update_mode_led+0x28c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <update_mode_led+0x290>)
 8000d06:	8811      	ldrh	r1, [r2, #0]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 ff67 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[1], functionDataPin[1], OFF);
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <update_mode_led+0x28c>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <update_mode_led+0x290>)
 8000d16:	8851      	ldrh	r1, [r2, #2]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 ff5f 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[2], functionDataPin[2], OFF);
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <update_mode_led+0x28c>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <update_mode_led+0x290>)
 8000d26:	8891      	ldrh	r1, [r2, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 ff57 	bl	8001bde <HAL_GPIO_WritePin>
 8000d30:	e04c      	b.n	8000dcc <update_mode_led+0x2d4>
			}
			else if(washing_mode == 2){
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <update_mode_led+0x278>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d12c      	bne.n	8000d94 <update_mode_led+0x29c>
				HAL_GPIO_WritePin(functionDataPort[0], functionDataPin[0], OFF);
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <update_mode_led+0x28c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <update_mode_led+0x290>)
 8000d40:	8811      	ldrh	r1, [r2, #0]
 8000d42:	2200      	movs	r2, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 ff4a 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[1], functionDataPin[1], ON);
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <update_mode_led+0x28c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <update_mode_led+0x290>)
 8000d50:	8851      	ldrh	r1, [r2, #2]
 8000d52:	2201      	movs	r2, #1
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 ff42 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[2], functionDataPin[2], OFF);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <update_mode_led+0x28c>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <update_mode_led+0x290>)
 8000d60:	8891      	ldrh	r1, [r2, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 ff3a 	bl	8001bde <HAL_GPIO_WritePin>
 8000d6a:	e02f      	b.n	8000dcc <update_mode_led+0x2d4>
 8000d6c:	20000172 	.word	0x20000172
 8000d70:	20000174 	.word	0x20000174
 8000d74:	aaaaaaab 	.word	0xaaaaaaab
 8000d78:	20000176 	.word	0x20000176
 8000d7c:	b60b60b7 	.word	0xb60b60b7
 8000d80:	20000178 	.word	0x20000178
 8000d84:	200000ec 	.word	0x200000ec
 8000d88:	200000d8 	.word	0x200000d8
 8000d8c:	20000110 	.word	0x20000110
 8000d90:	20000118 	.word	0x20000118
			}
			else if(washing_mode == 3){
 8000d94:	4b8e      	ldr	r3, [pc, #568]	; (8000fd0 <update_mode_led+0x4d8>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d117      	bne.n	8000dcc <update_mode_led+0x2d4>
				HAL_GPIO_WritePin(functionDataPort[0], functionDataPin[0], OFF);
 8000d9c:	4b8d      	ldr	r3, [pc, #564]	; (8000fd4 <update_mode_led+0x4dc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a8d      	ldr	r2, [pc, #564]	; (8000fd8 <update_mode_led+0x4e0>)
 8000da2:	8811      	ldrh	r1, [r2, #0]
 8000da4:	2200      	movs	r2, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 ff19 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[1], functionDataPin[1], OFF);
 8000dac:	4b89      	ldr	r3, [pc, #548]	; (8000fd4 <update_mode_led+0x4dc>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	4a89      	ldr	r2, [pc, #548]	; (8000fd8 <update_mode_led+0x4e0>)
 8000db2:	8851      	ldrh	r1, [r2, #2]
 8000db4:	2200      	movs	r2, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 ff11 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[2], functionDataPin[2], ON);
 8000dbc:	4b85      	ldr	r3, [pc, #532]	; (8000fd4 <update_mode_led+0x4dc>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4a85      	ldr	r2, [pc, #532]	; (8000fd8 <update_mode_led+0x4e0>)
 8000dc2:	8891      	ldrh	r1, [r2, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 ff09 	bl	8001bde <HAL_GPIO_WritePin>
			}
			update_mode_seven_segment_led_buffer(washing_mode/10, washing_mode%10);
 8000dcc:	4b80      	ldr	r3, [pc, #512]	; (8000fd0 <update_mode_led+0x4d8>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	4a82      	ldr	r2, [pc, #520]	; (8000fdc <update_mode_led+0x4e4>)
 8000dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd6:	08db      	lsrs	r3, r3, #3
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	b2d8      	uxtb	r0, r3
 8000ddc:	4b7c      	ldr	r3, [pc, #496]	; (8000fd0 <update_mode_led+0x4d8>)
 8000dde:	881a      	ldrh	r2, [r3, #0]
 8000de0:	4b7e      	ldr	r3, [pc, #504]	; (8000fdc <update_mode_led+0x4e4>)
 8000de2:	fba3 1302 	umull	r1, r3, r3, r2
 8000de6:	08d9      	lsrs	r1, r3, #3
 8000de8:	460b      	mov	r3, r1
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	440b      	add	r3, r1
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4619      	mov	r1, r3
 8000df8:	f000 f918 	bl	800102c <update_mode_seven_segment_led_buffer>
 8000dfc:	e0e4      	b.n	8000fc8 <update_mode_led+0x4d0>
		}
		else if(setting == 2){
 8000dfe:	4b78      	ldr	r3, [pc, #480]	; (8000fe0 <update_mode_led+0x4e8>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d16e      	bne.n	8000ee4 <update_mode_led+0x3ec>
			if(water_level == 30){
 8000e06:	4b77      	ldr	r3, [pc, #476]	; (8000fe4 <update_mode_led+0x4ec>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	2b1e      	cmp	r3, #30
 8000e0c:	d118      	bne.n	8000e40 <update_mode_led+0x348>
				HAL_GPIO_WritePin(functionDataPort[3], functionDataPin[3], ON);
 8000e0e:	4b71      	ldr	r3, [pc, #452]	; (8000fd4 <update_mode_led+0x4dc>)
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	4a71      	ldr	r2, [pc, #452]	; (8000fd8 <update_mode_led+0x4e0>)
 8000e14:	88d1      	ldrh	r1, [r2, #6]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fee0 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[4], functionDataPin[4], OFF);
 8000e1e:	4b6d      	ldr	r3, [pc, #436]	; (8000fd4 <update_mode_led+0x4dc>)
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	4a6d      	ldr	r2, [pc, #436]	; (8000fd8 <update_mode_led+0x4e0>)
 8000e24:	8911      	ldrh	r1, [r2, #8]
 8000e26:	2200      	movs	r2, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fed8 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[5], functionDataPin[5], OFF);
 8000e2e:	4b69      	ldr	r3, [pc, #420]	; (8000fd4 <update_mode_led+0x4dc>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a69      	ldr	r2, [pc, #420]	; (8000fd8 <update_mode_led+0x4e0>)
 8000e34:	8951      	ldrh	r1, [r2, #10]
 8000e36:	2200      	movs	r2, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fed0 	bl	8001bde <HAL_GPIO_WritePin>
 8000e3e:	e038      	b.n	8000eb2 <update_mode_led+0x3ba>
			}
			else if(water_level == 60){
 8000e40:	4b68      	ldr	r3, [pc, #416]	; (8000fe4 <update_mode_led+0x4ec>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	2b3c      	cmp	r3, #60	; 0x3c
 8000e46:	d118      	bne.n	8000e7a <update_mode_led+0x382>
				HAL_GPIO_WritePin(functionDataPort[3], functionDataPin[3], OFF);
 8000e48:	4b62      	ldr	r3, [pc, #392]	; (8000fd4 <update_mode_led+0x4dc>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	4a62      	ldr	r2, [pc, #392]	; (8000fd8 <update_mode_led+0x4e0>)
 8000e4e:	88d1      	ldrh	r1, [r2, #6]
 8000e50:	2200      	movs	r2, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fec3 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[4], functionDataPin[4], ON);
 8000e58:	4b5e      	ldr	r3, [pc, #376]	; (8000fd4 <update_mode_led+0x4dc>)
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	4a5e      	ldr	r2, [pc, #376]	; (8000fd8 <update_mode_led+0x4e0>)
 8000e5e:	8911      	ldrh	r1, [r2, #8]
 8000e60:	2201      	movs	r2, #1
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 febb 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[5], functionDataPin[5], OFF);
 8000e68:	4b5a      	ldr	r3, [pc, #360]	; (8000fd4 <update_mode_led+0x4dc>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	4a5a      	ldr	r2, [pc, #360]	; (8000fd8 <update_mode_led+0x4e0>)
 8000e6e:	8951      	ldrh	r1, [r2, #10]
 8000e70:	2200      	movs	r2, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 feb3 	bl	8001bde <HAL_GPIO_WritePin>
 8000e78:	e01b      	b.n	8000eb2 <update_mode_led+0x3ba>
			}
			else if(water_level == 90){
 8000e7a:	4b5a      	ldr	r3, [pc, #360]	; (8000fe4 <update_mode_led+0x4ec>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	2b5a      	cmp	r3, #90	; 0x5a
 8000e80:	d117      	bne.n	8000eb2 <update_mode_led+0x3ba>
				HAL_GPIO_WritePin(functionDataPort[3], functionDataPin[3], OFF);
 8000e82:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <update_mode_led+0x4dc>)
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	4a54      	ldr	r2, [pc, #336]	; (8000fd8 <update_mode_led+0x4e0>)
 8000e88:	88d1      	ldrh	r1, [r2, #6]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fea6 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[4], functionDataPin[4], OFF);
 8000e92:	4b50      	ldr	r3, [pc, #320]	; (8000fd4 <update_mode_led+0x4dc>)
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	4a50      	ldr	r2, [pc, #320]	; (8000fd8 <update_mode_led+0x4e0>)
 8000e98:	8911      	ldrh	r1, [r2, #8]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fe9e 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[5], functionDataPin[5], ON);
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <update_mode_led+0x4dc>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a4c      	ldr	r2, [pc, #304]	; (8000fd8 <update_mode_led+0x4e0>)
 8000ea8:	8951      	ldrh	r1, [r2, #10]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fe96 	bl	8001bde <HAL_GPIO_WritePin>
			}
			update_mode_seven_segment_led_buffer(water_level/10, water_level%10);
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <update_mode_led+0x4ec>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	4a49      	ldr	r2, [pc, #292]	; (8000fdc <update_mode_led+0x4e4>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	b2d8      	uxtb	r0, r3
 8000ec2:	4b48      	ldr	r3, [pc, #288]	; (8000fe4 <update_mode_led+0x4ec>)
 8000ec4:	881a      	ldrh	r2, [r3, #0]
 8000ec6:	4b45      	ldr	r3, [pc, #276]	; (8000fdc <update_mode_led+0x4e4>)
 8000ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8000ecc:	08d9      	lsrs	r1, r3, #3
 8000ece:	460b      	mov	r3, r1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	4619      	mov	r1, r3
 8000ede:	f000 f8a5 	bl	800102c <update_mode_seven_segment_led_buffer>
 8000ee2:	e071      	b.n	8000fc8 <update_mode_led+0x4d0>
		}
		else if(setting == 3){
 8000ee4:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <update_mode_led+0x4e8>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d16d      	bne.n	8000fc8 <update_mode_led+0x4d0>
			if(temperature_level == 1){
 8000eec:	4b3e      	ldr	r3, [pc, #248]	; (8000fe8 <update_mode_led+0x4f0>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d118      	bne.n	8000f26 <update_mode_led+0x42e>
				HAL_GPIO_WritePin(functionDataPort[6], functionDataPin[6], ON);
 8000ef4:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <update_mode_led+0x4dc>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a37      	ldr	r2, [pc, #220]	; (8000fd8 <update_mode_led+0x4e0>)
 8000efa:	8991      	ldrh	r1, [r2, #12]
 8000efc:	2201      	movs	r2, #1
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fe6d 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[7], functionDataPin[7], OFF);
 8000f04:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <update_mode_led+0x4dc>)
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	4a33      	ldr	r2, [pc, #204]	; (8000fd8 <update_mode_led+0x4e0>)
 8000f0a:	89d1      	ldrh	r1, [r2, #14]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fe65 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[8], functionDataPin[8], OFF);
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <update_mode_led+0x4dc>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <update_mode_led+0x4e0>)
 8000f1a:	8a11      	ldrh	r1, [r2, #16]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fe5d 	bl	8001bde <HAL_GPIO_WritePin>
 8000f24:	e038      	b.n	8000f98 <update_mode_led+0x4a0>
			}
			else if(temperature_level == 2){
 8000f26:	4b30      	ldr	r3, [pc, #192]	; (8000fe8 <update_mode_led+0x4f0>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d118      	bne.n	8000f60 <update_mode_led+0x468>
				HAL_GPIO_WritePin(functionDataPort[6], functionDataPin[6], OFF);
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <update_mode_led+0x4dc>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <update_mode_led+0x4e0>)
 8000f34:	8991      	ldrh	r1, [r2, #12]
 8000f36:	2200      	movs	r2, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fe50 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[7], functionDataPin[7], ON);
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <update_mode_led+0x4dc>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <update_mode_led+0x4e0>)
 8000f44:	89d1      	ldrh	r1, [r2, #14]
 8000f46:	2201      	movs	r2, #1
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fe48 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[8], functionDataPin[8], OFF);
 8000f4e:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <update_mode_led+0x4dc>)
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <update_mode_led+0x4e0>)
 8000f54:	8a11      	ldrh	r1, [r2, #16]
 8000f56:	2200      	movs	r2, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fe40 	bl	8001bde <HAL_GPIO_WritePin>
 8000f5e:	e01b      	b.n	8000f98 <update_mode_led+0x4a0>
			}
			else if(temperature_level == 3){
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <update_mode_led+0x4f0>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d117      	bne.n	8000f98 <update_mode_led+0x4a0>
				HAL_GPIO_WritePin(functionDataPort[6], functionDataPin[6], OFF);
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <update_mode_led+0x4dc>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <update_mode_led+0x4e0>)
 8000f6e:	8991      	ldrh	r1, [r2, #12]
 8000f70:	2200      	movs	r2, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fe33 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[7], functionDataPin[7], OFF);
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <update_mode_led+0x4dc>)
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <update_mode_led+0x4e0>)
 8000f7e:	89d1      	ldrh	r1, [r2, #14]
 8000f80:	2200      	movs	r2, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fe2b 	bl	8001bde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(functionDataPort[8], functionDataPin[8], ON);
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <update_mode_led+0x4dc>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <update_mode_led+0x4e0>)
 8000f8e:	8a11      	ldrh	r1, [r2, #16]
 8000f90:	2201      	movs	r2, #1
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fe23 	bl	8001bde <HAL_GPIO_WritePin>
			}
			update_mode_seven_segment_led_buffer(temperature_level/10, temperature_level%10);
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <update_mode_led+0x4f0>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <update_mode_led+0x4e4>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	b2d8      	uxtb	r0, r3
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <update_mode_led+0x4f0>)
 8000faa:	881a      	ldrh	r2, [r3, #0]
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <update_mode_led+0x4e4>)
 8000fae:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb2:	08d9      	lsrs	r1, r3, #3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f000 f832 	bl	800102c <update_mode_seven_segment_led_buffer>
		}
	}
}
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000174 	.word	0x20000174
 8000fd4:	200000ec 	.word	0x200000ec
 8000fd8:	200000d8 	.word	0x200000d8
 8000fdc:	cccccccd 	.word	0xcccccccd
 8000fe0:	20000172 	.word	0x20000172
 8000fe4:	20000176 	.word	0x20000176
 8000fe8:	20000178 	.word	0x20000178

08000fec <Reset_Set_Funtion>:
//
void Reset_Set_Funtion(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	setting = washing_mode = water_level = temperature_level = 0;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <Reset_Set_Funtion+0x30>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	801a      	strh	r2, [r3, #0]
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <Reset_Set_Funtion+0x30>)
 8000ff8:	881a      	ldrh	r2, [r3, #0]
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <Reset_Set_Funtion+0x34>)
 8000ffc:	801a      	strh	r2, [r3, #0]
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <Reset_Set_Funtion+0x34>)
 8001000:	881a      	ldrh	r2, [r3, #0]
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <Reset_Set_Funtion+0x38>)
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <Reset_Set_Funtion+0x38>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <Reset_Set_Funtion+0x3c>)
 800100e:	701a      	strb	r2, [r3, #0]
	// update buffer
	update_mode_seven_segment_led_buffer(0, 0);
 8001010:	2100      	movs	r1, #0
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f80a 	bl	800102c <update_mode_seven_segment_led_buffer>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000178 	.word	0x20000178
 8001020:	20000176 	.word	0x20000176
 8001024:	20000174 	.word	0x20000174
 8001028:	20000172 	.word	0x20000172

0800102c <update_mode_seven_segment_led_buffer>:

// SET FUNCTIONS 7 SEG LED

void update_mode_seven_segment_led_buffer(uint8_t value1, uint8_t value2){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
	if(value1 > 9 || value2 > 9) return;
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b09      	cmp	r3, #9
 8001040:	d809      	bhi.n	8001056 <update_mode_seven_segment_led_buffer+0x2a>
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	2b09      	cmp	r3, #9
 8001046:	d806      	bhi.n	8001056 <update_mode_seven_segment_led_buffer+0x2a>
	modeSevenSegmentLEDBuffer[0] = value1;
 8001048:	4a05      	ldr	r2, [pc, #20]	; (8001060 <update_mode_seven_segment_led_buffer+0x34>)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	7013      	strb	r3, [r2, #0]
	modeSevenSegmentLEDBuffer[1] = value2;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <update_mode_seven_segment_led_buffer+0x34>)
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	7053      	strb	r3, [r2, #1]
	return;
 8001054:	e000      	b.n	8001058 <update_mode_seven_segment_led_buffer+0x2c>
	if(value1 > 9 || value2 > 9) return;
 8001056:	bf00      	nop
}
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	20000170 	.word	0x20000170

08001064 <mode_seven_segment_data_output>:

void mode_seven_segment_data_output(uint8_t value){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	uint8_t index;
	for(index = 0; index < 7; index ++){
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e023      	b.n	80010bc <mode_seven_segment_data_output+0x58>
			if((value>>index) & 0x01){
 8001074:	79fa      	ldrb	r2, [r7, #7]
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	fa42 f303 	asr.w	r3, r2, r3
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00c      	beq.n	800109e <mode_seven_segment_data_output+0x3a>
				HAL_GPIO_WritePin(modeLedDataPort[index], modeLedDataPin[index], RESET);
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	4a11      	ldr	r2, [pc, #68]	; (80010cc <mode_seven_segment_data_output+0x68>)
 8001088:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <mode_seven_segment_data_output+0x6c>)
 8001090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	f000 fda1 	bl	8001bde <HAL_GPIO_WritePin>
 800109c:	e00b      	b.n	80010b6 <mode_seven_segment_data_output+0x52>
			} else {
				HAL_GPIO_WritePin(modeLedDataPort[index], modeLedDataPin[index], SET);
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <mode_seven_segment_data_output+0x68>)
 80010a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <mode_seven_segment_data_output+0x6c>)
 80010aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ae:	2201      	movs	r2, #1
 80010b0:	4619      	mov	r1, r3
 80010b2:	f000 fd94 	bl	8001bde <HAL_GPIO_WritePin>
	for(index = 0; index < 7; index ++){
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d9d8      	bls.n	8001074 <mode_seven_segment_data_output+0x10>
			}
		}
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000b0 	.word	0x200000b0
 80010d0:	200000a0 	.word	0x200000a0

080010d4 <clear_previous_mode_seven_segment_led>:

void clear_previous_mode_seven_segment_led(uint8_t index){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_OF_SEVEN_SEGMENT_LED) return;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d80c      	bhi.n	80010fe <clear_previous_mode_seven_segment_led+0x2a>
	HAL_GPIO_WritePin(modeSevenSegmentControlPort[index], modeSevenSegmentControlPin[index], SET);
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <clear_previous_mode_seven_segment_led+0x34>)
 80010e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <clear_previous_mode_seven_segment_led+0x38>)
 80010f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f4:	2201      	movs	r2, #1
 80010f6:	4619      	mov	r1, r3
 80010f8:	f000 fd71 	bl	8001bde <HAL_GPIO_WritePin>
 80010fc:	e000      	b.n	8001100 <clear_previous_mode_seven_segment_led+0x2c>
	if(index >= NUMBER_OF_SEVEN_SEGMENT_LED) return;
 80010fe:	bf00      	nop
}
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000d0 	.word	0x200000d0
 800110c:	200000cc 	.word	0x200000cc

08001110 <set_current_mode_seven_segment_led>:

void set_current_mode_seven_segment_led(uint8_t index){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_OF_SEVEN_SEGMENT_LED) return;
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d80c      	bhi.n	800113a <set_current_mode_seven_segment_led+0x2a>
	HAL_GPIO_WritePin(modeSevenSegmentControlPort[index], modeSevenSegmentControlPin[index], RESET);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <set_current_mode_seven_segment_led+0x34>)
 8001124:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <set_current_mode_seven_segment_led+0x38>)
 800112c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001130:	2200      	movs	r2, #0
 8001132:	4619      	mov	r1, r3
 8001134:	f000 fd53 	bl	8001bde <HAL_GPIO_WritePin>
 8001138:	e000      	b.n	800113c <set_current_mode_seven_segment_led+0x2c>
	if(index >= NUMBER_OF_SEVEN_SEGMENT_LED) return;
 800113a:	bf00      	nop
}
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000d0 	.word	0x200000d0
 8001148:	200000cc 	.word	0x200000cc

0800114c <mode_seven_segment_led_driver>:

void mode_seven_segment_led_driver(void){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	static uint8_t mode_led_index = 0;
	uint8_t tempModeData;
	// clear previous led data
	clear_previous_mode_seven_segment_led(mode_led_index);
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <mode_seven_segment_led_driver+0x54>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ffbc 	bl	80010d4 <clear_previous_mode_seven_segment_led>
	// current led data setting
	mode_led_index = (mode_led_index + 1) % 2;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <mode_seven_segment_led_driver+0x54>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	bfb8      	it	lt
 800116a:	425b      	neglt	r3, r3
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <mode_seven_segment_led_driver+0x54>)
 8001170:	701a      	strb	r2, [r3, #0]
	tempModeData = sevenSegmentLEDConversion[modeSevenSegmentLEDBuffer[mode_led_index]];
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <mode_seven_segment_led_driver+0x54>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <mode_seven_segment_led_driver+0x58>)
 800117a:	5c9b      	ldrb	r3, [r3, r2]
 800117c:	461a      	mov	r2, r3
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <mode_seven_segment_led_driver+0x5c>)
 8001180:	5c9b      	ldrb	r3, [r3, r2]
 8001182:	71fb      	strb	r3, [r7, #7]
	mode_seven_segment_data_output(tempModeData);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff6c 	bl	8001064 <mode_seven_segment_data_output>
	set_current_mode_seven_segment_led(mode_led_index);
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <mode_seven_segment_led_driver+0x54>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffbd 	bl	8001110 <set_current_mode_seven_segment_led>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000017b 	.word	0x2000017b
 80011a4:	20000170 	.word	0x20000170
 80011a8:	20000058 	.word	0x20000058

080011ac <setTimer0>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int timer0_counter = 0;
int timer0_flag = 0;

void setTimer0(int duration){
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIME_CYCLE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <setTimer0+0x2c>)
 80011b8:	fb82 1203 	smull	r1, r2, r2, r3
 80011bc:	1092      	asrs	r2, r2, #2
 80011be:	17db      	asrs	r3, r3, #31
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	4a06      	ldr	r2, [pc, #24]	; (80011dc <setTimer0+0x30>)
 80011c4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <setTimer0+0x34>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	66666667 	.word	0x66666667
 80011dc:	2000017c 	.word	0x2000017c
 80011e0:	20000180 	.word	0x20000180

080011e4 <timer0_run>:

void timer0_run(){
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
	if(timer0_counter <= 0)timer0_flag = 1;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <timer0_run+0x24>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dc02      	bgt.n	80011f6 <timer0_run+0x12>
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <timer0_run+0x28>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]
	timer0_counter--;
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <timer0_run+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	4a02      	ldr	r2, [pc, #8]	; (8001208 <timer0_run+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	2000017c 	.word	0x2000017c
 800120c:	20000180 	.word	0x20000180

08001210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001214:	f000 f9e2 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001218:	f000 f826 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121c:	f000 f8ac 	bl	8001378 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001220:	f000 f85e 	bl	80012e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001224:	480e      	ldr	r0, [pc, #56]	; (8001260 <main+0x50>)
 8001226:	f001 f943 	bl	80024b0 <HAL_TIM_Base_Start_IT>
  //Traffic_Light_Init(RED);
  Washing_Light_Init(READY);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff f942 	bl	80004b4 <Washing_Light_Init>
  setTimer0(50);
 8001230:	2032      	movs	r0, #50	; 0x32
 8001232:	f7ff ffbb 	bl	80011ac <setTimer0>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(timer0_flag == 1){
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <main+0x54>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d106      	bne.n	800124c <main+0x3c>
		  Washing_Update();
 800123e:	f7ff f949 	bl	80004d4 <Washing_Update>
		  Washing_Light_Update();
 8001242:	f7ff fa61 	bl	8000708 <Washing_Light_Update>
		  setTimer0(50);
 8001246:	2032      	movs	r0, #50	; 0x32
 8001248:	f7ff ffb0 	bl	80011ac <setTimer0>
	  }
	  fsm_for_input1_processing(); // CHOOSE MODE
 800124c:	f7fe ff7e 	bl	800014c <fsm_for_input1_processing>
	  fsm_for_input2_processing(); // INCREASE MODE
 8001250:	f7fe ffba 	bl	80001c8 <fsm_for_input2_processing>
	  fsm_for_input3_processing(); // DECREASE MODE
 8001254:	f7fe fff6 	bl	8000244 <fsm_for_input3_processing>
	  fsm_for_input4_processing(); // RUN/RESET MODE
 8001258:	f7ff f832 	bl	80002c0 <fsm_for_input4_processing>
	  if(timer0_flag == 1){
 800125c:	e7eb      	b.n	8001236 <main+0x26>
 800125e:	bf00      	nop
 8001260:	20000184 	.word	0x20000184
 8001264:	20000180 	.word	0x20000180

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b090      	sub	sp, #64	; 0x40
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2228      	movs	r2, #40	; 0x28
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fcd2 	bl	8002c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001292:	2310      	movs	r3, #16
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001296:	2300      	movs	r3, #0
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0318 	add.w	r3, r7, #24
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fcce 	bl	8001c40 <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012aa:	f000 f8c7 	bl	800143c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 ff3a 	bl	8002140 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012d2:	f000 f8b3 	bl	800143c <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3740      	adds	r7, #64	; 0x40
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_TIM2_Init+0x94>)
 80012fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001302:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_TIM2_Init+0x94>)
 8001306:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800130a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM2_Init+0x94>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_TIM2_Init+0x94>)
 8001314:	2209      	movs	r2, #9
 8001316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_TIM2_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_TIM2_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <MX_TIM2_Init+0x94>)
 8001326:	f001 f873 	bl	8002410 <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001330:	f000 f884 	bl	800143c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <MX_TIM2_Init+0x94>)
 8001342:	f001 fa09 	bl	8002758 <HAL_TIM_ConfigClockSource>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800134c:	f000 f876 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_TIM2_Init+0x94>)
 800135e:	f001 fbd1 	bl	8002b04 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001368:	f000 f868 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000184 	.word	0x20000184

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <MX_GPIO_Init+0xb8>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a27      	ldr	r2, [pc, #156]	; (8001430 <MX_GPIO_Init+0xb8>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b25      	ldr	r3, [pc, #148]	; (8001430 <MX_GPIO_Init+0xb8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <MX_GPIO_Init+0xb8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a21      	ldr	r2, [pc, #132]	; (8001430 <MX_GPIO_Init+0xb8>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_GPIO_Init+0xb8>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013bc:	2200      	movs	r2, #0
 80013be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013c2:	481c      	ldr	r0, [pc, #112]	; (8001434 <MX_GPIO_Init+0xbc>)
 80013c4:	f000 fc0b 	bl	8001bde <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80013c8:	2200      	movs	r2, #0
 80013ca:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80013ce:	481a      	ldr	r0, [pc, #104]	; (8001438 <MX_GPIO_Init+0xc0>)
 80013d0:	f000 fc05 	bl	8001bde <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2302      	movs	r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4619      	mov	r1, r3
 80013ec:	4811      	ldr	r0, [pc, #68]	; (8001434 <MX_GPIO_Init+0xbc>)
 80013ee:	f000 fa65 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013f2:	230f      	movs	r3, #15
 80013f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	4619      	mov	r1, r3
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <MX_GPIO_Init+0xc0>)
 8001406:	f000 fa59 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800140a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800140e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2302      	movs	r3, #2
 800141a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4619      	mov	r1, r3
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_GPIO_Init+0xc0>)
 8001424:	f000 fa4a 	bl	80018bc <HAL_GPIO_Init>

}
 8001428:	bf00      	nop
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	40010800 	.word	0x40010800
 8001438:	40010c00 	.word	0x40010c00

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	e7fe      	b.n	8001444 <Error_Handler+0x8>
	...

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_MspInit+0x5c>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <HAL_MspInit+0x5c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6193      	str	r3, [r2, #24]
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_MspInit+0x5c>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_MspInit+0x5c>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_MspInit+0x5c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_MspInit+0x5c>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_MspInit+0x60>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_MspInit+0x60>)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000

080014ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014bc:	d113      	bne.n	80014e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	201c      	movs	r0, #28
 80014dc:	f000 f9b7 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e0:	201c      	movs	r0, #28
 80014e2:	f000 f9d0 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f895 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM2_IRQHandler+0x10>)
 800154a:	f000 fffd 	bl	8002548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000184 	.word	0x20000184

08001558 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <HAL_TIM_PeriodElapsedCallback>:
#include <leds_display/Functions_Light.h>
#include <timer/timer.h>
#include <leds_display/led_7seg_display.h>


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001574:	d107      	bne.n	8001586 <HAL_TIM_PeriodElapsedCallback+0x22>
		timer0_run();
 8001576:	f7ff fe35 	bl	80011e4 <timer0_run>
		seven_segment_led_driver();
 800157a:	f7ff fa8d 	bl	8000a98 <seven_segment_led_driver>
		mode_seven_segment_led_driver();
 800157e:	f7ff fde5 	bl	800114c <mode_seven_segment_led_driver>
		reading_button();
 8001582:	f7fe fedb 	bl	800033c <reading_button>
	}
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	; (80015c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015b6:	f7ff ffcf 	bl	8001558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ba:	f001 fb0d 	bl	8002bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015be:	f7ff fe27 	bl	8001210 <main>
  bx lr
 80015c2:	4770      	bx	lr
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 80015cc:	08002c70 	.word	0x08002c70
  ldr r2, =_sbss
 80015d0:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 80015d4:	200001d0 	.word	0x200001d0

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>
	...

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x28>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x28>)
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f923 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	200f      	movs	r0, #15
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff ff26 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40022000 	.word	0x40022000

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f93b 	bl	80018a2 <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f903 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000120 	.word	0x20000120
 8001660:	20000128 	.word	0x20000128
 8001664:	20000124 	.word	0x20000124

08001668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_IncTick+0x1c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_IncTick+0x20>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a03      	ldr	r2, [pc, #12]	; (8001688 <HAL_IncTick+0x20>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000128 	.word	0x20000128
 8001688:	200001cc 	.word	0x200001cc

0800168c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b02      	ldr	r3, [pc, #8]	; (800169c <HAL_GetTick+0x10>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	200001cc 	.word	0x200001cc

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4906      	ldr	r1, [pc, #24]	; (8001738 <__NVIC_EnableIRQ+0x34>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	; (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff90 	bl	800173c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff2d 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff42 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff90 	bl	8001790 <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5f 	bl	800173c <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff35 	bl	8001704 <__NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffa2 	bl	80017f4 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b08b      	sub	sp, #44	; 0x2c
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	e148      	b.n	8001b62 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d0:	2201      	movs	r2, #1
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 8137 	bne.w	8001b5c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4aa3      	ldr	r2, [pc, #652]	; (8001b80 <HAL_GPIO_Init+0x2c4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d05e      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 80018f8:	4aa1      	ldr	r2, [pc, #644]	; (8001b80 <HAL_GPIO_Init+0x2c4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d875      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 80018fe:	4aa1      	ldr	r2, [pc, #644]	; (8001b84 <HAL_GPIO_Init+0x2c8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d058      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001904:	4a9f      	ldr	r2, [pc, #636]	; (8001b84 <HAL_GPIO_Init+0x2c8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d86f      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800190a:	4a9f      	ldr	r2, [pc, #636]	; (8001b88 <HAL_GPIO_Init+0x2cc>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d052      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001910:	4a9d      	ldr	r2, [pc, #628]	; (8001b88 <HAL_GPIO_Init+0x2cc>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d869      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001916:	4a9d      	ldr	r2, [pc, #628]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d04c      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 800191c:	4a9b      	ldr	r2, [pc, #620]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d863      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001922:	4a9b      	ldr	r2, [pc, #620]	; (8001b90 <HAL_GPIO_Init+0x2d4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d046      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001928:	4a99      	ldr	r2, [pc, #612]	; (8001b90 <HAL_GPIO_Init+0x2d4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d85d      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800192e:	2b12      	cmp	r3, #18
 8001930:	d82a      	bhi.n	8001988 <HAL_GPIO_Init+0xcc>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d859      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <HAL_GPIO_Init+0x80>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	080019b7 	.word	0x080019b7
 8001940:	08001991 	.word	0x08001991
 8001944:	080019a3 	.word	0x080019a3
 8001948:	080019e5 	.word	0x080019e5
 800194c:	080019eb 	.word	0x080019eb
 8001950:	080019eb 	.word	0x080019eb
 8001954:	080019eb 	.word	0x080019eb
 8001958:	080019eb 	.word	0x080019eb
 800195c:	080019eb 	.word	0x080019eb
 8001960:	080019eb 	.word	0x080019eb
 8001964:	080019eb 	.word	0x080019eb
 8001968:	080019eb 	.word	0x080019eb
 800196c:	080019eb 	.word	0x080019eb
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019eb 	.word	0x080019eb
 8001978:	080019eb 	.word	0x080019eb
 800197c:	080019eb 	.word	0x080019eb
 8001980:	08001999 	.word	0x08001999
 8001984:	080019ad 	.word	0x080019ad
 8001988:	4a82      	ldr	r2, [pc, #520]	; (8001b94 <HAL_GPIO_Init+0x2d8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800198e:	e02c      	b.n	80019ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e029      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	3304      	adds	r3, #4
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e024      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	3308      	adds	r3, #8
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e01f      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	330c      	adds	r3, #12
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e01a      	b.n	80019ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019be:	2304      	movs	r3, #4
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e013      	b.n	80019ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019cc:	2308      	movs	r3, #8
 80019ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	611a      	str	r2, [r3, #16]
          break;
 80019d6:	e009      	b.n	80019ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	615a      	str	r2, [r3, #20]
          break;
 80019e2:	e003      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x130>
          break;
 80019ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2bff      	cmp	r3, #255	; 0xff
 80019f0:	d801      	bhi.n	80019f6 <HAL_GPIO_Init+0x13a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	e001      	b.n	80019fa <HAL_GPIO_Init+0x13e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3304      	adds	r3, #4
 80019fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d802      	bhi.n	8001a08 <HAL_GPIO_Init+0x14c>
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x152>
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	3b08      	subs	r3, #8
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	210f      	movs	r1, #15
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	6a39      	ldr	r1, [r7, #32]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8090 	beq.w	8001b5c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3c:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <HAL_GPIO_Init+0x2dc>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a55      	ldr	r2, [pc, #340]	; (8001b98 <HAL_GPIO_Init+0x2dc>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_GPIO_Init+0x2dc>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a54:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_GPIO_Init+0x2e4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00d      	beq.n	8001a9c <HAL_GPIO_Init+0x1e0>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a48      	ldr	r2, [pc, #288]	; (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d007      	beq.n	8001a98 <HAL_GPIO_Init+0x1dc>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a47      	ldr	r2, [pc, #284]	; (8001ba8 <HAL_GPIO_Init+0x2ec>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_GPIO_Init+0x1d8>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e004      	b.n	8001a9e <HAL_GPIO_Init+0x1e2>
 8001a94:	2303      	movs	r3, #3
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x1e2>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_GPIO_Init+0x1e2>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4093      	lsls	r3, r2
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aae:	493b      	ldr	r1, [pc, #236]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac8:	4b38      	ldr	r3, [pc, #224]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4937      	ldr	r1, [pc, #220]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ad6:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4933      	ldr	r1, [pc, #204]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af0:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	492d      	ldr	r1, [pc, #180]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001afe:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4929      	ldr	r1, [pc, #164]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4923      	ldr	r1, [pc, #140]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	491f      	ldr	r1, [pc, #124]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	4919      	ldr	r1, [pc, #100]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4915      	ldr	r1, [pc, #84]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	3301      	adds	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f47f aeaf 	bne.w	80018d0 <HAL_GPIO_Init+0x14>
  }
}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	372c      	adds	r7, #44	; 0x2c
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	10320000 	.word	0x10320000
 8001b84:	10310000 	.word	0x10310000
 8001b88:	10220000 	.word	0x10220000
 8001b8c:	10210000 	.word	0x10210000
 8001b90:	10120000 	.word	0x10120000
 8001b94:	10110000 	.word	0x10110000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	40011000 	.word	0x40011000
 8001bac:	40010400 	.word	0x40010400

08001bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e001      	b.n	8001bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	807b      	strh	r3, [r7, #2]
 8001bea:	4613      	mov	r3, r2
 8001bec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bee:	787b      	ldrb	r3, [r7, #1]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf4:	887a      	ldrh	r2, [r7, #2]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bfa:	e003      	b.n	8001c04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	041a      	lsls	r2, r3, #16
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	611a      	str	r2, [r3, #16]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c20:	887a      	ldrh	r2, [r7, #2]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	041a      	lsls	r2, r3, #16
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	400b      	ands	r3, r1
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	611a      	str	r2, [r3, #16]
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e26c      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8087 	beq.w	8001d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c60:	4b92      	ldr	r3, [pc, #584]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d00c      	beq.n	8001c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c6c:	4b8f      	ldr	r3, [pc, #572]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d112      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5e>
 8001c78:	4b8c      	ldr	r3, [pc, #560]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c84:	d10b      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c86:	4b89      	ldr	r3, [pc, #548]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d06c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x12c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d168      	bne.n	8001d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e246      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x76>
 8001ca8:	4b80      	ldr	r3, [pc, #512]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a7f      	ldr	r2, [pc, #508]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	e02e      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x98>
 8001cbe:	4b7b      	ldr	r3, [pc, #492]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7a      	ldr	r2, [pc, #488]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b78      	ldr	r3, [pc, #480]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a77      	ldr	r2, [pc, #476]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0xbc>
 8001ce2:	4b72      	ldr	r3, [pc, #456]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a71      	ldr	r2, [pc, #452]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b6f      	ldr	r3, [pc, #444]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6a      	ldr	r2, [pc, #424]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b68      	ldr	r3, [pc, #416]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a67      	ldr	r2, [pc, #412]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fcb6 	bl	800168c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fcb2 	bl	800168c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e1fa      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b5d      	ldr	r3, [pc, #372]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xe4>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fca2 	bl	800168c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fc9e 	bl	800168c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1e6      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	4b53      	ldr	r3, [pc, #332]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x10c>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d063      	beq.n	8001e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7a:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d11c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x18c>
 8001d92:	4b46      	ldr	r3, [pc, #280]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d116      	bne.n	8001dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	4b43      	ldr	r3, [pc, #268]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_RCC_OscConfig+0x176>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e1ba      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4939      	ldr	r1, [pc, #228]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	e03a      	b.n	8001e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd4:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7ff fc57 	bl	800168c <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fc53 	bl	800168c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e19b      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4927      	ldr	r1, [pc, #156]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e015      	b.n	8001e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fc36 	bl	800168c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fc32 	bl	800168c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e17a      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d03a      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d019      	beq.n	8001e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fc16 	bl	800168c <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff fc12 	bl	800168c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e15a      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 faa6 	bl	80023d4 <RCC_Delay>
 8001e88:	e01c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff fbfc 	bl	800168c <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e96:	e00f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fbf8 	bl	800168c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d908      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e140      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	42420000 	.word	0x42420000
 8001eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	4b9e      	ldr	r3, [pc, #632]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e9      	bne.n	8001e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a6 	beq.w	800201e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4b97      	ldr	r3, [pc, #604]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b94      	ldr	r3, [pc, #592]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a93      	ldr	r2, [pc, #588]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b91      	ldr	r3, [pc, #580]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0a:	4b8b      	ldr	r3, [pc, #556]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a8a      	ldr	r2, [pc, #552]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fbb9 	bl	800168c <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7ff fbb5 	bl	800168c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	; 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0fd      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x312>
 8001f44:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a7a      	ldr	r2, [pc, #488]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	e02d      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x334>
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a75      	ldr	r2, [pc, #468]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	4b73      	ldr	r3, [pc, #460]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a72      	ldr	r2, [pc, #456]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	e01c      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x356>
 8001f7c:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a6c      	ldr	r2, [pc, #432]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	4b6a      	ldr	r3, [pc, #424]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a69      	ldr	r2, [pc, #420]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e00b      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f96:	4b67      	ldr	r3, [pc, #412]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a66      	ldr	r2, [pc, #408]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6213      	str	r3, [r2, #32]
 8001fa2:	4b64      	ldr	r3, [pc, #400]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a63      	ldr	r2, [pc, #396]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d015      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fb69 	bl	800168c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff fb65 	bl	800168c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0ab      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ee      	beq.n	8001fbe <HAL_RCC_OscConfig+0x37e>
 8001fe0:	e014      	b.n	800200c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fb53 	bl	800168c <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff fb4f 	bl	800168c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e095      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ee      	bne.n	8001fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b48      	ldr	r3, [pc, #288]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4a47      	ldr	r2, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8081 	beq.w	800212a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002028:	4b42      	ldr	r3, [pc, #264]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d061      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d146      	bne.n	80020ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b3f      	ldr	r3, [pc, #252]	; (800213c <HAL_RCC_OscConfig+0x4fc>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff fb23 	bl	800168c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff fb1f 	bl	800168c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e067      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205c:	4b35      	ldr	r3, [pc, #212]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d108      	bne.n	8002084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	492d      	ldr	r1, [pc, #180]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a19      	ldr	r1, [r3, #32]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	430b      	orrs	r3, r1
 8002096:	4927      	ldr	r1, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x4fc>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff faf3 	bl	800168c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7ff faef 	bl	800168c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e037      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x46a>
 80020c8:	e02f      	b.n	800212a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_RCC_OscConfig+0x4fc>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fadc 	bl	800168c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff fad8 	bl	800168c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e020      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x498>
 80020f6:	e018      	b.n	800212a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e013      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	42420060 	.word	0x42420060

08002140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0d0      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d910      	bls.n	8002184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b67      	ldr	r3, [pc, #412]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0207 	bic.w	r2, r3, #7
 800216a:	4965      	ldr	r1, [pc, #404]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b8      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	494d      	ldr	r1, [pc, #308]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d040      	beq.n	8002260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d115      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e07f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e073      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06b      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4936      	ldr	r1, [pc, #216]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002230:	f7ff fa2c 	bl	800168c <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7ff fa28 	bl	800168c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e053      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d210      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4922      	ldr	r1, [pc, #136]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e032      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4916      	ldr	r1, [pc, #88]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ce:	f000 f821 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	490a      	ldr	r1, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1cc>)
 80022e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1d0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f98a 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40022000 	.word	0x40022000
 8002304:	40021000 	.word	0x40021000
 8002308:	08002c58 	.word	0x08002c58
 800230c:	20000120 	.word	0x20000120
 8002310:	20000124 	.word	0x20000124

08002314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b490      	push	{r4, r7}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800231a:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800231c:	1d3c      	adds	r4, r7, #4
 800231e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002320:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002324:	f240 2301 	movw	r3, #513	; 0x201
 8002328:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d002      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x40>
 800234e:	2b08      	cmp	r3, #8
 8002350:	d003      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x46>
 8002352:	e02d      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002356:	623b      	str	r3, [r7, #32]
      break;
 8002358:	e02d      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	0c9b      	lsrs	r3, r3, #18
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002366:	4413      	add	r3, r2
 8002368:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800236c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c5b      	lsrs	r3, r3, #17
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002386:	4413      	add	r3, r2
 8002388:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800238c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	4a0e      	ldr	r2, [pc, #56]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002392:	fb02 f203 	mul.w	r2, r2, r3
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
 800239e:	e004      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	623b      	str	r3, [r7, #32]
      break;
 80023ae:	e002      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b2:	623b      	str	r3, [r7, #32]
      break;
 80023b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b6:	6a3b      	ldr	r3, [r7, #32]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3728      	adds	r7, #40	; 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc90      	pop	{r4, r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	08002c48 	.word	0x08002c48
 80023c8:	40021000 	.word	0x40021000
 80023cc:	007a1200 	.word	0x007a1200
 80023d0:	003d0900 	.word	0x003d0900

080023d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <RCC_Delay+0x34>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <RCC_Delay+0x38>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0a5b      	lsrs	r3, r3, #9
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f0:	bf00      	nop
  }
  while (Delay --);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1e5a      	subs	r2, r3, #1
 80023f6:	60fa      	str	r2, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f9      	bne.n	80023f0 <RCC_Delay+0x1c>
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	20000120 	.word	0x20000120
 800240c:	10624dd3 	.word	0x10624dd3

08002410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e041      	b.n	80024a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff f838 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f000 fa6a 	bl	8002928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d001      	beq.n	80024c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e035      	b.n	8002534 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a16      	ldr	r2, [pc, #88]	; (8002540 <HAL_TIM_Base_Start_IT+0x90>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_TIM_Base_Start_IT+0x4e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f2:	d004      	beq.n	80024fe <HAL_TIM_Base_Start_IT+0x4e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a12      	ldr	r2, [pc, #72]	; (8002544 <HAL_TIM_Base_Start_IT+0x94>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d111      	bne.n	8002522 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d010      	beq.n	8002532 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002520:	e007      	b.n	8002532 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40012c00 	.word	0x40012c00
 8002544:	40000400 	.word	0x40000400

08002548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b02      	cmp	r3, #2
 800255c:	d122      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b02      	cmp	r3, #2
 800256a:	d11b      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0202 	mvn.w	r2, #2
 8002574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f9b1 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 8002590:	e005      	b.n	800259e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f9a4 	bl	80028e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f9b3 	bl	8002904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d122      	bne.n	80025f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d11b      	bne.n	80025f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0204 	mvn.w	r2, #4
 80025c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f987 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f97a 	bl	80028e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f989 	bl	8002904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b08      	cmp	r3, #8
 8002604:	d122      	bne.n	800264c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b08      	cmp	r3, #8
 8002612:	d11b      	bne.n	800264c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0208 	mvn.w	r2, #8
 800261c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2204      	movs	r2, #4
 8002622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f95d 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f950 	bl	80028e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f95f 	bl	8002904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b10      	cmp	r3, #16
 8002658:	d122      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b10      	cmp	r3, #16
 8002666:	d11b      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0210 	mvn.w	r2, #16
 8002670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2208      	movs	r2, #8
 8002676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f933 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f926 	bl	80028e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f935 	bl	8002904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10e      	bne.n	80026cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d107      	bne.n	80026cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0201 	mvn.w	r2, #1
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7fe ff4c 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	2b80      	cmp	r3, #128	; 0x80
 80026d8:	d10e      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e4:	2b80      	cmp	r3, #128	; 0x80
 80026e6:	d107      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fa67 	bl	8002bc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b40      	cmp	r3, #64	; 0x40
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b40      	cmp	r3, #64	; 0x40
 8002712:	d107      	bne.n	8002724 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8f9 	bl	8002916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b20      	cmp	r3, #32
 8002730:	d10e      	bne.n	8002750 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b20      	cmp	r3, #32
 800273e:	d107      	bne.n	8002750 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0220 	mvn.w	r2, #32
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fa32 	bl	8002bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_TIM_ConfigClockSource+0x18>
 800276c:	2302      	movs	r3, #2
 800276e:	e0b3      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x180>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800278e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002796:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a8:	d03e      	beq.n	8002828 <HAL_TIM_ConfigClockSource+0xd0>
 80027aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ae:	f200 8087 	bhi.w	80028c0 <HAL_TIM_ConfigClockSource+0x168>
 80027b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b6:	f000 8085 	beq.w	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	d87f      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x168>
 80027c0:	2b70      	cmp	r3, #112	; 0x70
 80027c2:	d01a      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0xa2>
 80027c4:	2b70      	cmp	r3, #112	; 0x70
 80027c6:	d87b      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x168>
 80027c8:	2b60      	cmp	r3, #96	; 0x60
 80027ca:	d050      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x116>
 80027cc:	2b60      	cmp	r3, #96	; 0x60
 80027ce:	d877      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x168>
 80027d0:	2b50      	cmp	r3, #80	; 0x50
 80027d2:	d03c      	beq.n	800284e <HAL_TIM_ConfigClockSource+0xf6>
 80027d4:	2b50      	cmp	r3, #80	; 0x50
 80027d6:	d873      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x168>
 80027d8:	2b40      	cmp	r3, #64	; 0x40
 80027da:	d058      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x136>
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	d86f      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x168>
 80027e0:	2b30      	cmp	r3, #48	; 0x30
 80027e2:	d064      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x156>
 80027e4:	2b30      	cmp	r3, #48	; 0x30
 80027e6:	d86b      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x168>
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d060      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x156>
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d867      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x168>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d05c      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x156>
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d05a      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027f8:	e062      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6899      	ldr	r1, [r3, #8]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f000 f95c 	bl	8002ac6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800281c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	609a      	str	r2, [r3, #8]
      break;
 8002826:	e04e      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f000 f945 	bl	8002ac6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800284a:	609a      	str	r2, [r3, #8]
      break;
 800284c:	e03b      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	461a      	mov	r2, r3
 800285c:	f000 f8bc 	bl	80029d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2150      	movs	r1, #80	; 0x50
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f913 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 800286c:	e02b      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	461a      	mov	r2, r3
 800287c:	f000 f8da 	bl	8002a34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2160      	movs	r1, #96	; 0x60
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f903 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 800288c:	e01b      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	461a      	mov	r2, r3
 800289c:	f000 f89c 	bl	80029d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2140      	movs	r1, #64	; 0x40
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f8f3 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 80028ac:	e00b      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f000 f8ea 	bl	8002a92 <TIM_ITRx_SetConfig>
        break;
 80028be:	e002      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028c0:	bf00      	nop
 80028c2:	e000      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <TIM_Base_SetConfig+0xa8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d007      	beq.n	8002950 <TIM_Base_SetConfig+0x28>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d003      	beq.n	8002950 <TIM_Base_SetConfig+0x28>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <TIM_Base_SetConfig+0xac>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d108      	bne.n	8002962 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a1a      	ldr	r2, [pc, #104]	; (80029d0 <TIM_Base_SetConfig+0xa8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <TIM_Base_SetConfig+0x52>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d003      	beq.n	800297a <TIM_Base_SetConfig+0x52>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a17      	ldr	r2, [pc, #92]	; (80029d4 <TIM_Base_SetConfig+0xac>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <TIM_Base_SetConfig+0xa8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d103      	bne.n	80029c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	615a      	str	r2, [r3, #20]
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40000400 	.word	0x40000400

080029d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f023 0201 	bic.w	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f023 030a 	bic.w	r3, r3, #10
 8002a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f023 0210 	bic.w	r2, r3, #16
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	031b      	lsls	r3, r3, #12
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	621a      	str	r2, [r3, #32]
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f043 0307 	orr.w	r3, r3, #7
 8002ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b087      	sub	sp, #28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	021a      	lsls	r2, r3, #8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	609a      	str	r2, [r3, #8]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e041      	b.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a14      	ldr	r2, [pc, #80]	; (8002bac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d009      	beq.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b68:	d004      	beq.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d10c      	bne.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40000400 	.word	0x40000400

08002bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <__libc_init_array>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	2600      	movs	r6, #0
 8002bdc:	4d0c      	ldr	r5, [pc, #48]	; (8002c10 <__libc_init_array+0x38>)
 8002bde:	4c0d      	ldr	r4, [pc, #52]	; (8002c14 <__libc_init_array+0x3c>)
 8002be0:	1b64      	subs	r4, r4, r5
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	42a6      	cmp	r6, r4
 8002be6:	d109      	bne.n	8002bfc <__libc_init_array+0x24>
 8002be8:	f000 f822 	bl	8002c30 <_init>
 8002bec:	2600      	movs	r6, #0
 8002bee:	4d0a      	ldr	r5, [pc, #40]	; (8002c18 <__libc_init_array+0x40>)
 8002bf0:	4c0a      	ldr	r4, [pc, #40]	; (8002c1c <__libc_init_array+0x44>)
 8002bf2:	1b64      	subs	r4, r4, r5
 8002bf4:	10a4      	asrs	r4, r4, #2
 8002bf6:	42a6      	cmp	r6, r4
 8002bf8:	d105      	bne.n	8002c06 <__libc_init_array+0x2e>
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
 8002bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c00:	4798      	blx	r3
 8002c02:	3601      	adds	r6, #1
 8002c04:	e7ee      	b.n	8002be4 <__libc_init_array+0xc>
 8002c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0a:	4798      	blx	r3
 8002c0c:	3601      	adds	r6, #1
 8002c0e:	e7f2      	b.n	8002bf6 <__libc_init_array+0x1e>
 8002c10:	08002c68 	.word	0x08002c68
 8002c14:	08002c68 	.word	0x08002c68
 8002c18:	08002c68 	.word	0x08002c68
 8002c1c:	08002c6c 	.word	0x08002c6c

08002c20 <memset>:
 8002c20:	4603      	mov	r3, r0
 8002c22:	4402      	add	r2, r0
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d100      	bne.n	8002c2a <memset+0xa>
 8002c28:	4770      	bx	lr
 8002c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c2e:	e7f9      	b.n	8002c24 <memset+0x4>

08002c30 <_init>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr

08002c3c <_fini>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr
